# Password for all users is 'aaaaaaaa' (8 A's)
User.create!([
  {name: "Free User", email: "free@user.com", encrypted_password: "fb5148d322c4fc6ea5cd2c5fc817dddc00b38c23", salt: "fe56dc9d8fd0ab3c05ea244083f9bee02d11c792", token: "6422cf23b1351534f383c0bcc202e2411b2ca86a", admin: nil, email_weekly: false, email_daily: false, email_subscription_token: "da4d1a76897703bc8e2f4fee462c79b8bac89ac7", stripe_id: nil, subscription_id: nil, subscription_end_date: nil, subscription_cancelled: nil, plan_id: nil, plan_hash: {}, phone_number: nil, next_steps_taken: {}, free_subscription: nil},
  {name: "Admin User", email: "admin@user.com", encrypted_password: "ba0c11016ee016baf26e0615145fcb5a0b086072", salt: "7dbc8812a8d104af8305adb1ef47ba49fb7d6dbc", token: "dcf1b7f238590b78047c86e6e58381a4b8e2f180", admin: true, email_weekly: false, email_daily: false, email_subscription_token: "f26f0147c0cd7c6211114d7814bb27a51d1a6b0f", stripe_id: "cus_H0yx6loyz4rn9I", subscription_id: "sub_H0yxVy54BABf77", subscription_end_date: "2020-05-01 03:11:28", subscription_cancelled: false, plan_id: "plan_GpIlpbs3dTKIzq", plan_hash: {"id"=>"plan_GpIlpbs3dTKIzq", "tiers"=>nil, "active"=>"true", "amount"=>"2900", "object"=>"plan", "created"=>"1583016707", "product"=>"prod_Gn75PWg2s7B2n3", "currency"=>"usd", "interval"=>"month", "livemode"=>"false", "metadata"=>"{}", "nickname"=>"Monthly 2", "tiers_mode"=>nil, "usage_type"=>"licensed", "amount_decimal"=>"2900", "billing_scheme"=>"per_unit", "interval_count"=>"1", "aggregate_usage"=>nil, "transform_usage"=>nil, "trial_period_days"=>nil}, phone_number: nil, next_steps_taken: {}, free_subscription: nil},
  {name: "Pro User", email: "pro@user.com", encrypted_password: "924cdc339e17d65629feac036b9912966d3071b1", salt: "c6e07a350cc180c4a897e95cb0f05ffe9d267549", token: "1cb4274cb8a73dc106ad6869ff19de10ee53c159", admin: nil, email_weekly: false, email_daily: false, email_subscription_token: "88b54bebed9a6b9217513f03b3e4b34aa98638af", stripe_id: "cus_H0yyQcoQyVpaIC", subscription_id: "sub_H0yyBiJ8p5HAR4", subscription_end_date: "2020-05-01 03:12:36", subscription_cancelled: false, plan_id: "plan_GpIlpbs3dTKIzq", plan_hash: {"id"=>"plan_GpIlpbs3dTKIzq", "tiers"=>nil, "active"=>"true", "amount"=>"2900", "object"=>"plan", "created"=>"1583016707", "product"=>"prod_Gn75PWg2s7B2n3", "currency"=>"usd", "interval"=>"month", "livemode"=>"false", "metadata"=>"{}", "nickname"=>"Monthly 2", "tiers_mode"=>nil, "usage_type"=>"licensed", "amount_decimal"=>"2900", "billing_scheme"=>"per_unit", "interval_count"=>"1", "aggregate_usage"=>nil, "transform_usage"=>nil, "trial_period_days"=>nil}, phone_number: nil, next_steps_taken: {}, free_subscription: nil}
])
Course.create!([
  {name: "Vuetify: Make a VueJS app look good, even if you're bad at design", parent_id: 3, series_type: "chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/708-Building a VueJS app part 3.png.png", description: "In this chapter we're going to take a functional but ugly app and turn it into a beautiful app -- or, at the very least, one that's less ugly -- using Vuetify, a Material Design library for VueJS.\n\nSpecifically, we're going to cover creating a navbar, improving button style and interaction (such as @mousedown events), using the inbuilt style classes (including color), using a bootstrap-style rows/columns layout, and using a cards layout.", order: "3.0", difficulty: "beginner"},
  {name: "Many-to-Many relationships in Vuex", parent_id: 3, series_type: "chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/315-Building a VueJS app part 12.png.png", description: "Tagging videos correctly is an important part of helping users find what they want, so in this tutorial we'll be building an easy way for admin users to tag videos.\n\nWe'll be working with the v-autocomplete component and learning about changing many-to-many relationships in Vuex.", order: "9.5546875", difficulty: "intermediate"},
  {name: "Introduction to VueJS", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/792-Building a VueJS app part 1.png.png", description: "In this intro-level course, we create a VueJS app using Vue-CLI.  We then walk through the basics of VueJS, Vue Router, Vuex, and player.js to create a simple video player app.\n\nIf you're completely new to VueJS, this is the place to start.\n\nThis also acts as the first chapter in the Building a VueJS App mega-course.", order: "1.0", difficulty: "beginner"},
  {name: "Authentication and Authorization in VueJS", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/117-Building a VueJS app part 8 v2.png.png", description: "Most apps will need authentication and authorization, but it can be extremely tricky the first time you build it.\n\nThis tutorial takes us step by logical step as we grow our authentication system, slowly making our login and registration process more usable and more secure.\n\nTowards the end, we tackle authorization and token authentication.\n\nIf you're using MirageJS to mock your backend, [here is the relevant video](https://www.vuescreencasts.com/watch/176).", order: "8.1875", difficulty: "intermediate"},
  {name: "Notifications using Vuetify's snackbar component", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/984-Building a VueJS app part 10.png.png", description: "Many user workflows can benefit from an unobtrusive notification system -- including, in our app, user login/registration and video create, edit, and destroy.\n\nIn this course we take Vuetify's snackbar component and build on it to create a reusable app-wide notification system.\n\nNote: there are libraries do this just as well or better, and I would recommend doing that for your project unless you have needs that require deep customization.  [Here's a listing of many of the popular ones](https://madewithvuejs.com/blog/best-vue-js-notification-components).", order: "9.25", difficulty: "intermediate"},
  {name: "Refactoring localstorage persistence to server using Vuex and Axios", parent_id: 3, series_type: "chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/026-Building a VueJS app part 11.png.png", description: "When we tracked watched videos in chapter 4, we did it using localstorage because we didn't have any users on our server.\n\nNow that we are tracking users, we can refactor our code to get the watch data from the server.  This allows users to go between devices without losing data.", order: "9.453125", difficulty: "intermediate"},
  {name: "Video Creation Form - Text Inputs + Vuetify + Axios + Vuex ", parent_id: 3, series_type: "chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/187-Building a VueJS app part 5.png.png", description: "In this tutorial we learn how to add more videos to our VueJS app.\n\nWe'll start with building our own Create Video form using the basic input tags, then we'll greatly simplify it by using Vuetify's text input components.  \n\nWe'll also see how to persist the new videos to the server using Axios, then save it with Vuex.", order: "4.5", difficulty: "beginner"},
  {name: "Building VueScreencasts.com", parent_id: nil, series_type: "course", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/339-Building a VueJS app - Parent.png.png", description: "In this GIGANTIC course, we're going to start from zero and build VueScreencasts.com*.  A real, production-ready, money-making app, created on video.\n\nThis is probably the most in-depth introductions to Vue available -- and _definitely_ the most in-depth _free_ introduction to Vue that's available.  In addition to all the functionality you see, there's also a large admin section that we'll be building.  We really do cover almost everything here.\n\n\\*The progress of this series may sometimes be behind the state of the production app.", order: nil, difficulty: "beginner to advanced"},
  {name: "Vuex + LocalStorage to track video watch status ", parent_id: 3, series_type: "chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/021-Building a VueJS app part 4.png.png", description: "Let’s say we get a bunch of videos on our site, and people can’t remember everything they’ve watched… well, good news!  Computers are _great_ at remembering things!\n\nWe’re going to mark videos as played — either when the video ends or when the user clicks a button — and then display that information to the user on the video watch page and on the lists of videos.\n\nAlong the way we'll learn about Vuex, Localstorage, Font Awesome, and vue-video-player.", order: "4.0", difficulty: "beginner"},
  {name: "Moving our Admin pages to NuxtJS", parent_id: 3, series_type: "chapter", image_url: nil, description: "I promised to show every part of building this app, and I'm going to keep that promise... but unfortunately, that means there are going to be some boring parts.\n\nLike this chapter.\n\nWatch it if you want, but don't say I didn't warn you.\n\nYou could also skip to the next chapter on Nuxt Auth, which is very interesting.", order: "16.96875", difficulty: "intermediate"},
  {name: "Real-world challenges with NuxtJS and Server-Side Rendering", parent_id: 3, series_type: "chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/802-Building a VueJS app part 17.png.png", description: "In the last chapter, we learned the basic concepts of NuxtJS… now it’s time to use them in a real-world app.\n\nWe’re transferring over the user-facing portions of our site (minus anything auth-related, that comes later).  Along the way we solidify and practice the concepts we learned last time.\n\nWe also learn the challenges of debugging in Nuxt, the hoops you sometimes have to jump through to get packages to work, and how messy asyncData can get without Vuex.", order: "15.25", difficulty: "intermediate"},
  {name: "Introduction to NuxtJS", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/797-Getting Started with Nuxt.png.png", description: "NuxtJS is a framework built on top of VueJS.  \n\nThe biggest benefits you get out of the box are server-side rendering and automatic code splitting.  You also get many common Vue libraries built in, pulled together with a conventional folder structure in order to reduce boilerplate.\n\nThis course only scratches the surface of what Nuxt can do, but it does cover most of the major features and goes farther than the other free tutorials I've found.\n", order: "12.671875", difficulty: "intermediate"},
  {name: "NuxtJS + Vuex: Deserialization, load strategies, middleware ", parent_id: 3, series_type: "chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/062-Building a VueJS app part 18.png.png", description: "In this video we move from loading each page with asyncData to preloading the app's data into Vuex from a middleware hook.  Along the way we learn several new concepts and review even more!", order: "16.625", difficulty: "intermediate"},
  {name: "Vue 2.6 Slots", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/468-Building a VueJS app part 25.png.png", description: "Components with slots are way more flexible than props-only components.\n\nThis tutorial shows how to use VueJS’s slots feature, including how to use named slots and scoped slots (with slot props).  We use the Vue 2.6 syntax, which is significantly different than the deprecated Vue 2.5 syntax.  The Vue 3.0 syntax may have some minor changes, but should be fairly similar.\n", order: "19.0", difficulty: "beginner"},
  {name: "Upgrading our Video Creation and Editing Form ", parent_id: 3, series_type: "chapter", image_url: nil, description: "It’s time to start improving our Vue app’s UI!  Specifically, we’re going to improve the forms and workflow around Creating and Editing videos.\n\nThis video is more focused on improving our project than in teaching a specific skill; more of a walkthrough than a tutorial.  If you’re invested in seeing our app develop, this will be great. If you’re looking to hone specific skills, don’t worry… we’ve got three videos coming up on Nuxt Plugins, using Markdown, and uploading files directly to S3.  And in this chapter, we look at some cool stuff around displaying time durations.", order: "18.015625", difficulty: "intermediate"},
  {name: "Vuex Modules", parent_id: 3, series_type: "chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/634-Building a VueJS app part 15.png.png", description: "In this tutorial we go over how to split up our Vuex store file into smaller files -- both the mechanics of how to do it, and the philosophy of _where_ to split the file.\n\nYou'll learn how to access the State of a module, how to dispatch to a module's Actions, how to access the root store from a module, and much more.\n", order: "9.859375", difficulty: "intermediate"},
  {name: "Nuxt Auth: Authentication and Authorization in Nuxt", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/301-Building a VueJS app part 20.png.png", description: "This VueJS Tutorial shows how to add Authentication and Authorization to your NuxtJS app, and make it work with SSR (server-side rendering).  Once you understand the concepts and flow, it becomes surprisingly easy.\n\nFor this introduction to the Nuxt Auth module, we don’t require that you’ve watched any of the previous videos on this channel, but to get the most out of it you do need to have a working Nuxt app and basic knowledge of both Nuxt and Vue.\n\nIf you're looking for authentication and authorization in a regular VueJS app, or you want to see me coding the UserAuthForm component we use in this course, check out the [VueJS Auth Course](https://www.vuescreencasts.com/courses/9).", order: "17.3125", difficulty: "advanced"},
  {name: "Complete CRUD in ONE page - includes inline editing", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/986-Building a VueJS app part 14.png.png", description: "The CRUD operations -- Create, Read, Update, and Delete -- are the core of many data-oriented apps.\n\nIn this tutorial we learn how to make our app handle all of those operations from the /tags page.\n\nIn addition to doing all the standard stuff with Vuex and Axios, we also have some cool tricks we bring out to make the Create and Update operations work inline -- programmatically focusing elements, and using stuff like @keydown and @blur.", order: "9.65625", difficulty: "intermediate"},
  {name: "Nuxt Universal SSR Deployment to Heroku", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/489-Building a VueJS app part 21.png.png", description: "It’s easy to deploy your Nuxt app… if you haven’t touched it since using `nuxt-create-app`.  Once you start adding that pesky code, things get more difficult.\n\nIn this VueJS Tutorial we deploy our ongoing project to Heroku.  Along the way we tackle not just the same old basic deploy steps that everyone does, but we also show how to connect to your server API, and then we debug an issue with Vuetify.", order: "18.0", difficulty: "advanced"},
  {name: "Validating Forms with Vuetify", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/326-Building a VueJS app part 7.png.png", description: "This course is all about validations!  We create custom validation rules, then combine them with Vuetify to make sure that our users can’t accidentally submit an invalid form.\n\nWe chose using custom validations over Vuelidate, Vee-Validate, or other libraries because our needs aren't yet complex enough to justify them, and it's a bit simpler to see how things work using custom validations.\n\nWe end up validating presence, minimum length, and maximum length.  These could be done with pure html, but they show the principles needed for more complex validations that can only be done with Javascript.\n\nWe also add some cool UI touches with the counter property on Vuetify's v-text-field component.\n", order: "7.65625", difficulty: "beginner"},
  {name: "Markdown and Syntax Highlighting in VueJS, compatible with Nuxt and SSR", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/406-Building a VueJS app part 24.png.png", description: "This tutorial shows you how to use marked.js and highlight.js in your VueJS app — even if it’s a Server-Side Rendered app like Nuxt.\n\nMarkdown is a great way to let your users customize their posts without requiring them to understand HTML.  It’s great for comments and other user-generated content, or for using in your Admin section like we’re doing today.\n\nWe’ll even show you how to get a live preview going, so your users can see how their markdown text is going to be rendered!", order: "18.078125", difficulty: "intermediate"},
  {name: "Secure File Upload to S3, Directly from the Browser", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/391-Building a VueJS app part 27.png.png", description: "In this tutorial, we’ll add S3 (AWS) file upload to our admin’s video edit form.  Because we host our backend at Heroku, it’s not a good idea to upload large files (such as long videos) through the server, so we decided to upload directly from the browser.  This creates some unique challenges (such as using your secret key without compromising it) which we address in the walkthrough.\n\nDisclaimer: I am not a security expert or an AWS expert.  If you have feedback about security, please comment below and I’ll incorporate it when I update the video for the VueScreencasts site.  If you have questions about AWS… sorry, it was enough of a struggle getting my stuff working.\n\nAnyways, enjoy the course!\n", order: "20.0", difficulty: "advanced"},
  {name: "Admin CRUD in Vuex", parent_id: 3, series_type: "chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/612-Building a VueJS app part 6.png.png", description: "In this tutorial we’ll be adding a delete button, an edit page, and an admin page to our VueJS app.  Along the way we’ll discover Vue Filters and learn more Vuex patterns.\n\nVue Filters are a feature that lets us create purely functional code, then use it in our template tags to modify data.  The big advantage over a method is that you know it won't have side effects -- and it's also slightly more visually appealing to stack multiple filters than to nest multiple methods calls.\n\nThe Vuex patterns we'll be learning will using actions to edit individual records within the store and remove records -- and calling the appropriate mutations and Axios API calls to make that happen.", order: "5.0", difficulty: "intermediate"},
  {name: "Making our VueJS app look nicer", parent_id: 3, series_type: "chapter", image_url: nil, description: "Now that we’ve already learned most of the basics, we're starting a pattern in this Building an App series… alternating the videos about Big New Concepts and Shiny New Libraries with videos where we just do a bunch of cleanup.  In case you can’t guess from the title, this is one of those cleanup videos.\n\nIf you’ve watched previous videos and have been frustrated by how haphazard and ugly the styling has been, then you’re in luck… this video will be a huge relief.  On the other hand, we’re not going to learn any major concepts, although we’ll review old concepts and pick up little tidbits about Vuetify and CSS.", order: "19.5", difficulty: "intermediate"},
  {name: "Nuxt Plugins - How to use arbitrary Vue libraries in your NuxtJS app", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/604-Building a VueJS app part 23.png.png", description: "Not all VueJS libraries work out of the box with Nuxt.  Some of them have custom modules, others have Nuxt or SSR-specific instructions, but for the rest we have to make our own plugin.  Fortunately, making our own plugins is pretty simple!\n\nIn this tutorial we create a Nuxt plugin for the vuetify-datetime-picker library.  This is an ES6 plugin, so we’ll see how to put it into our transpilation pipeline.\n\nOnce we have everything working, the final section will be using the new library within our app to create and use a custom published_at date.", order: "18.03125", difficulty: "beginner"},
  {name: "Building Complex Data Tables with Vuetify's v-data-table and VueJS", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/596-Building a VueJS app part 28.png.png", description: "Want to display a _lot_ of data?  This tutorial will show you how.\n\nVuetify's v-data-table is an incredibly powerful and flexible component that offers both sensible defaults and a vast array of customization options.  It accomplishes this through a clever mix of slots and props (and events, though we don't cover those in as much depth in this course). ", order: "21.0", difficulty: "advanced"},
  {name: "Replicating an API with MirageJS", parent_id: nil, series_type: "course", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/965-Building a VueJS app part 30.png.png", description: "MirageJS is a fantastic tool to build a production-ready frontend, even if your API doesn't yet exist.\n\nIn this course, we build the API required for the first 13 chapters of [the BuildingVuescreencasts.com course](https://www.vuescreencasts.com/courses/3).  Our primary goal is to make it easier to follow along with those videos even if you don’t want to build your own backend, but if you just want to learn Mirage and don’t care about the project, then this will still work for you — you don’t need to know all the stuff we’re doing in the Vue app in order to learn the Mirage API from this.\n\nWe'll be using [this branch](https://github.com/jeffreybiles/vue-screencasts/tree/with-mirage-backend).", order: nil, difficulty: "intermediate"},
  {name: "Adjusting our Aim", parent_id: 3, series_type: "chapter", image_url: nil, description: "We've been going the wrong direction on a couple things.  Time to course correct!", order: "22.0", difficulty: "intermediate"},
  {name: "Vuex Strict Mode Mutations: Anti-patterns and Intuitive Solutions", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/149-VueX Strict Mode.png.png", description: "I've gotten several comments asking how to make our example app work in Strict Mode, so in this course we're going to investigate two methods of doing that.\n\nThe first method is something that can seem correct at first, but is actually an anti-pattern.\n\nThe second method we use, the Changeset pattern, works great and also fixes a longstanding bug.", order: "23.0", difficulty: "intermediate"},
  {name: "Mirage with Nuxt", parent_id: nil, series_type: "course", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/322-Mirage and Nuxt.png.png", description: "Mirage lets you build complete frontend features,\neven if your API doesn't exist.\n\nThis is continuation of [the previous MirageJS course](https://www.vuescreencasts.com/courses/29), and shows how to work with MirageJS in Nuxt.\n\nWe'll be tracking our [Building VueScreencasts](https://www.vuescreencasts.com/courses/3) mega-course and building a mock backend for it, starting from the point where we switched to Nuxt.", order: nil, difficulty: "intermediate"},
  {name: "Advanced Components - Slots I", parent_id: 38, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/666-Advanced Components Slots I.png.png", description: "In this course we'll learn the basics of the slots API, and see how named slots and scoped slots (slot props) work.\n\nThis is an interactive course with exercises designed to maximize your learning and help you integrate the concepts into your skillset.  You can [clone the starting GitHub repo here](https://github.com/jeffreybiles/advanced-components-slots/tree/course-1-start) and use the course-1-start branch.\n\nPart II will build on this course and show even more advanced uses of the API learned in Part I. ", order: "0.0", difficulty: "intermediate"},
  {name: "Vuex: Loading data using axios and deserializing JSON API relationships", parent_id: 3, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/699-Building a VueJS app part 2.png.png", description: "In this course we'll learn a huge amount about data handling with Vuex and VueJS -- how to load data from the server, how to handle relationships, and how to deal with JSON-API.\n\nSpecifically, we'll cover accessing Vuex state (directly and through getters), dispatching Vuex actions, using Vuex mutations, setting up Axios calls, and deserializing the JSON API format into something more directly usable.\n\nIn our app, we'll implement a tag system to organize and navigate through our videos.\n\n__How to follow along__\n\nThere are several options if you want to follow along.\n\nFirst, you could use MirageJS as a mock backend.  [Here's the course where I explain how to use it](https://www.vuescreencasts.com/courses/29), and [here's the github branch](https://github.com/jeffreybiles/vue-screencasts/tree/with-mirage-backend).  I'll be linking to specific videos and github commits from the relevant videos in this course.  This is probably the easiest way to follow along, but the downside is that data doesn't actually persist... this is a temporary solution to help you learn, not something you'll want to put into production.\n\nSecond, you could download the Ruby on Rails app I've created.  [Here's the app](https://github.com/jeffreybiles/vue-screencasts-server).  The relevant github commits will be linked in the video where they're needed.  I plan on creating a \"how to get a Ruby on Rails app running\" video sometime, but for now, only use this option if you're able to install and run a Rails app.\n\nThird, you could create your own API with the backend web framework of your choice.  Apparently that's Laravel and Node for most of you.  I don't plan on offering courses in those right now, but I may do that eventually if demand is high enough.\n\nFinally, you could just watch without creating the app yourself.  You'll probably learn less, but it's an option.", order: "2.0", difficulty: "beginner"},
  {name: "Advanced Components: Slots II (Dynamic Slots)", parent_id: 38, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/245-Advanced Components - Slots II.png.png", description: "In this course, we're going to build a reusable Table component inspired by Vuetify's v-data-table.\n\nThe table will have dynamic column slots - users will feed the component a list of columns, and then be able to use slot names based on that in order to customize individual columns in the table.\n\nThis course will be most effective if you have some previous experience with Vue's slots feature (get that experience [here](https://www.vuescreencasts.com/courses/32)).\n\n[Starting code here](https://github.com/jeffreybiles/advanced-components-slots/tree/course-2-start).", order: "1.0", difficulty: "advanced"},
  {name: "MicroCasts", parent_id: nil, series_type: "course", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/230-mq2.jpg.jpeg", description: "Microcasts are little videos about all the things that don't fit in a course.\n\nSmall libraries introduced, questions answered, features announced, and more!\n\nEventually I'll find a better way to organize all of them.", order: nil, difficulty: "beginner to advanced"},
  {name: "Advanced Components - Slots III (DataLoader Component)", parent_id: 38, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/382-Advanced Components - Slots III.png.png", description: "This is part 3 of our series on Advanced Components and Slots in VueJS.\n\nIn this course, we’ll be building a DataLoader Component that can take in an API endpoint (and, optionally, an authentication token) and then pass back the response from the API call.  When using the component, you get customizable loading and error states for free.\n\nThe #loaded slot will receive the results of the API call via scoped slots.  While loading, a spinner will be displayed, and you can add a custom message via the #loading or #loading-message slots.  If there is an error, a default error message is displayed, which you can customize via the #error slot.  It also debounces the API calls, reducing network load.\n\nThe DataLoader Component itself is really cool and useful, but the biggest reason to watch this course is enhance your own thinking and add these tactics to your mental toolkit.", order: "2.0", difficulty: "intermediate"},
  {name: "Advanced Components: Slots", parent_id: nil, series_type: "course", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/899-Advanced Components - Slots.png.png", description: "This course has 5 chapters.\n\nThe first chapter starts with the basics of slots.\n\nBy the last chapter we've built a complex, lazy-loading, paginated table component.", order: nil, difficulty: "beginner to advanced"},
  {name: "Advanced Components: Building a Reusable Pagination Component", parent_id: 38, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/196-Advanced Components - Pagination.png.png", description: "In this course, we'll be building a reusable Pagination Component.\n\nIt will let the user \n* select the number of results per page, \n* navigate to pages both directly and with 'next' and 'previous' buttons, and\n* track their queries between page reloads via query params.\n\n<br>\n\nIt's reusable, and can work with data-sets that are paginated at the API level (like GitHub's API) or need to be split at the app level (like the Courses API).\n\nIn the next course, we'll be making it customizable via slots.\n\nIf you've been following along with the Advanced Components series, make sure to check out the [updated GitHub Auth](https://www.vuescreencasts.com/watch/264) and the [updated debouncing function](https://www.vuescreencasts.com/watch/279).\n\nFor newcomers, start with [the pagination-start branch on the Github repo](https://github.com/jeffreybiles/advanced-components-slots/tree/pagination-start).", order: "3.0", difficulty: "intermediate"},
  {name: "Advanced Components: Slots IV (Customizable Pagination Component)", parent_id: 38, series_type: "standalone_chapter", image_url: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/072-Advanced Components - Slots IV.png.png", description: "In this course, we take the Pagination Component we built in the previous course, and use Slots to make it completely customizable.\n\nWe also leann about Nested Slots, and use them to add the row of pagination buttons to the bottom of the table as well.\n\n\nGithub starter code: https://github.com/jeffreybiles/advanced-components-slots/tree/slots-4-start", order: "4.0", difficulty: "advanced"}
])
Video.create!([
  {name: "Review", description: "Let's go over the code we wrote in this first chapter, reviewing the concepts we learned along the way.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/057-1.6 - Review.mp4.mp4", duration: 633, published_at: "2019-09-09 05:00:00", code_summary: nil, course_id: 1, order: "7.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Playing video with vue-video-player", description: "Using the vue-video-player was less difficult than I imagined.  Let's get it working and get our video playing!", thumbnail: "https://vue-screencasts.s3.us-east-2.amazonaws.com/video-files/Series%3A+Building+a+VueJS+App/Thumbnails/Building+a+VueJS+app+part+1.png", videoUrl: "https://vue-screencasts.s3.us-east-2.amazonaws.com/video-files/Series%3A+Building+a+VueJS+App/1.5+-+Playing+video+with+the+vue-video-player.mp4", duration: 439, published_at: "2019-09-08 13:00:00", code_summary: nil, course_id: 1, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "What's Next?", description: "We go over our next steps, and see why we might want to start using Vuex for our data loading.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/981-17.5 Whats Next.mp4.mp4", duration: 166, published_at: "2019-10-19 13:00:00", code_summary: nil, course_id: 16, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Building the Tags Page", description: "We create the Tags page.  Our biggest challenge is getting the data loaded correctly, as it requires more complex munging than the previous API calls.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/223-17.4 Building the Tags Page.mp4.mp4", duration: 545, published_at: "2019-10-19 12:00:00", code_summary: nil, course_id: 16, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "The Home Page", description: "This is our first real Vue code!  \n\nWe learn about the interaction between the script, template, and style tags, creating dynamic HTML code with the v-for tag and the data hash.", thumbnail: "https://vue-screencasts.s3.us-east-2.amazonaws.com/video-files/Series%3A+Building+a+VueJS+App/Thumbnails/Building+a+VueJS+app+part+1.png", videoUrl: "https://vue-screencasts.s3.us-east-2.amazonaws.com/video-files/Series%3A+Building+a+VueJS+App/1.3+-+The+Home+Page.mp4", duration: 737, published_at: "2019-09-08 11:00:00", code_summary: "First example showing data\n\n```\n<template>\n  <div class=\"home\">\n    <h1>Videos</h1>\n    <h2>{{ myKey }}</h2>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'home',\n  components: {},\n  data(){\n    return {\n      myKey: 'hey'\n    }\n  }\n}\n</script>\n```\nMention that the full video data array will be at the end.\n\nLooping through a basic display.\n\n```\n<template>\n  <div class=\"home\">\n    <h1>Videos</h1>\n    <div class=\"video-container\">\n      <div v-for=\"video in videos\" :key=\"video.name\">\n        <div class=\"video-box\"> {{video.name}} </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped lang=\"scss\">\n  .video-container {\n    .video-box {\n      border: 1px solid black;\n      border-radius: 10px;\n      margin: 10px;\n      padding: 10px;\n    }\n  }\n</style> \n```\n\nEnding code\n\n```\n<template>\n  <div class=\"home\">\n    <h1>Videos</h1>\n    <div class=\"video-container\">\n      <div v-for=\"video in videos\" :key=\"video.name\">\n        <div class=\"video-box\">\n          <img :src=\"video.thumbnail\" />\n          <div>\n            <h3>{{ video.name }}</h3>\n            <div v-html=\"video.description\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style>\n  .video-container {\n    .video-box {\n      border: 1px solid black;\n      border-radius: 10px;\n      margin: 10px;\n      padding: 10px;\n      text-align: left;\n      display: flex;\n      justify-content: flex-start;\n      img {\n        width: 200px;\n        padding: 10px;\n      }\n    }\n  }\n</style>\n```\n\nFull data videos array:\n\n```\ndata() {\n  return {\n    videos: [\n      {\n        name: \"ES2015 Arrow Functions\",\n        description: `<p>ES2015 (aka ES6) has some great ways to make your code easier to write and understand. In this episode, we cover two different ways that you can make your code clearer by removing the 'function' keyword.</p>`,\n        thumbnail: 'https://vue-screencasts.s3.us-east-2.amazonaws.com/images/video-thumbnails/Thumbnail+-+Arrow+Function.png',\n      },\n      {\n        name: \"ES2015 Template Strings\",\n        description: `<p>Template strings are an incredibly useful new feature in ES2015... and you can use them in your Ember apps today!</p>\n                      <p>Here are 3 cool things that template strings enable.</p>`,\n        thumbnail: 'https://vue-screencasts.s3.us-east-2.amazonaws.com/images/video-thumbnails/Thumbnail+-+Template+Strings.png',\n      },\n      {\n        name: \"ES2015 Modules\",\n        description: `<p>Before modules, javascript code loading was a mess. Now it's pretty amazing.</p>\n                      <p>Learn about ES2015 modules and how they work together with ember-cli.</p>`,\n        thumbnail: 'https://vue-screencasts.s3.us-east-2.amazonaws.com/images/video-thumbnails/Thumbnail+-+ES2015+Modules.png',\n      },\n      {\n        name: \"Promise Basics\",\n        description: `<p>Promises are a tool for handling asynchronous communication, and they are commonly used in Ember applications. They’re even built in to Ember Data, route handling, and other parts of the Ember source.</p>\n                      <p>This episode introduces the then, catch, and finally blocks, how to chain them together, and how to use them with either named or anonymous functions.</p>`,\n        thumbnail: 'https://vue-screencasts.s3.us-east-2.amazonaws.com/images/video-thumbnails/Thumbnail+-+Promise+Basics.png',\n      },\n      {\n        name: \"Creating New Promises\",\n        description: `<p>Sometimes you want to start a new promise chain or have greater control over the timing of events. By manually creating a promise, you can do that.</p>\n                      <p>In this video we cover creating a new promise and resolving or rejecting the promise. We use two examples- a custom AJAX login and an Ember Data findAll request.</p>`,\n        thumbnail: 'https://vue-screencasts.s3.us-east-2.amazonaws.com/images/video-thumbnails/Thumbnail+-+Creating+New+Promises.png',\n      },\n      {\n        name: \"Multiple Concurrent Promises\",\n        description: `<p>Sometimes promises have to happen in an exact order, but often there will be several calls that can be made concurrently. RSVP’s Promise implementation allows that.</p>\n                      <p>In this video we show how to use the hash method, one of several methods available to do concurrent promises.</p>`,\n        thumbnail: 'https://vue-screencasts.s3.us-east-2.amazonaws.com/images/video-thumbnails/Thumbnail+-+Multiple+Concurrent+Promises.png',\n      },\n      {\n        name: \"ES2015 Destructuring\",\n        description: `<p>Destructuring is really cool, can save you code, and you’re probably already using a small portion of its power.</p>\n                      <p>Learn more about this cool new ES2015/ES6 feature, including how to destructure deeply nested objects, how to use it with Ember’s import statement, and how to use it with arrays.</p>`,\n        thumbnail: 'https://vue-screencasts.s3.us-east-2.amazonaws.com/images/video-thumbnails/Thumbnail+-+Destructuring.png',\n      },\n      {\n        name: \"ES2016 Decorators\",\n        description: `<p>Decorators let you easily and repeatedly add functionality to existing functions.</p>\n                      <p>In this episode we go over how to use and create decorators, creating two useful decorators that demonstrate different parts of the API.</p>`,\n        thumbnail: 'https://vue-screencasts.s3.us-east-2.amazonaws.com/images/video-thumbnails/Thumbnail+-+Decorators.png',\n      }\n    ],\n  }\n}\n```\n", course_id: 1, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "ready"},
  {name: "Intro to Admin CRUD in Vuex", description: "A preview of what we'll be building in this chapter.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/056-6.0 - Intro to Admin CRUD in VueX.mp4.mp4", duration: 44, published_at: "2019-09-18 08:00:00", code_summary: nil, course_id: 7, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to Building a Serious Nuxt App", description: "In this chapter we're going to continue building our Nuxt app, taking everything we learned from the Intro to Nuxt course and applying those concepts to start creating an app that's not a toy.\n\nWe also learn the challenges of debugging in Nuxt, the hoops you sometimes have to jump through to get packages to work, and how messy asyncData can get without Vuex.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/677-17.0 Intro to Building A Serious Nuxt App.mp4.mp4", duration: 141, published_at: "2019-10-19 08:00:00", code_summary: nil, course_id: 16, order: "0.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Vuetifying the Tag Buttons", description: "In this lesson, our goal is to make the Tag buttons look nice using Vuetify.\n\nTo do that, we'll learn about  the v-btn component, some utility classes, how Vuetify handles colors, and how to create a link from a Vuetify component.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/580-Building a VueJS app part 3.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/209-3.3 Vuetifying the Tag Buttons.mp4.mp4", duration: 426, published_at: "2019-09-11 07:00:00", code_summary: "    <v-btn color=\"green lighten-2 mr-2\" \n          small\n          :to=\"{ name: 'tag', params: {id: tag_id}}\">\n      {{ getTag(tag_id).name }}\n    </v-btn>", course_id: 4, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to Mirage with Nuxt", description: "Mirage is a tool that let you build new frontend features even when the backend API doesn't yet exist.  It does this by mocking out the backend API.\n\nThe requirements for this course are that you have some Mirage knowledge - either through [the previous Mirage course](https://www.vuescreencasts.com/courses/29) or through using it in your own app - and that you have some Nuxt knowledge.  Knowledge of the app we're building is helpful but not required.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/229-Mirage with Nuxt - Intro.mp4.mp4", duration: 123, published_at: "2020-01-26 13:00:00", code_summary: nil, course_id: 31, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Pagination within GitHub's API", description: "We take a look at how GitHub's API uses pagination, and then connect that with the pagination row we created in the last video.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/464-36.2 Pagination within GitHubs API.mp4.mp4", duration: 355, published_at: "2020-02-27 17:00:00", code_summary: nil, course_id: 36, order: "3.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Getting Started with Vuetify", description: "In this lesson, we install Vuetify via Vue-CLI, look at what they've changed, and then fix some of the issues caused by the installation.\n\nTo test it out beyond what's auto-generated, we customize the navbar a bit at the end as practice for the more extensive customizations that are coming up.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/323-Building a VueJS app part 3.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/128-3.2 Getting Started with Vuetify.mp4.mp4", duration: 380, published_at: "2019-09-11 07:00:00", code_summary: nil, course_id: 4, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Tempting Anti-Pattern for Vuex Strict Mode", description: "V-model breaks Strict Mode.\n\nIn this video, we break v-model up into the :value prop and the @input event, then make the @input event call a Vuex action.\n\nHowever, at the end we see the issues with this approach, and decide to take another route.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/103-32.1 Anti-pattern.mp4.mp4", duration: 257, published_at: "2020-01-21 03:00:00", code_summary: nil, course_id: 30, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Prop Definitions - Doing Them the Right Way", description: "We've been using props WRONG this entire time!\n\nOr, at least, using them in a way that contradicts the official VueJS Style Guide.\n\nFortunately, making the change is easy... and it makes our app more robust and easier to understand.\n\n[Source Code](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/467d35ccb6b48f064fc4bb68675be562b6dcae64).", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/639-29 Prop Definitions.mp4.mp4", duration: 460, published_at: "2019-11-29 09:00:00", code_summary: "", course_id: 28, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Loading Server data into Vuex", description: "By loading the data into Vuex, we can easily access it all throughout our app while using fewer API calls.  \n\nTo accomplish this, we move our loading call into a Vuex action, then call it from App.vue.\n\n[Github: Loading videos into store](https://github.com/jeffreybiles/vue-screencasts/commit/1910e7670b313a5ad16616d059bad14c86ebea40)", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/771-Building a VueJS app part 2.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/341-2.2 - Putting Server Data into VueX.mp4.mp4", duration: 618, published_at: "2019-09-09 07:00:00", code_summary: nil, course_id: 2, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Refactoring with deserializers, destructuring", description: "Now that our three actions are side-by-side, we can see many similarities between them - places where the code could be abstracted to gain clarity.\n\nIn this lesson, we create deserializers for the videos and tags that come over the wire, shaping the data so it's more easily used by our app.\n\nWe also abstract the API call, using creative destructuring to make our code short and clear.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/404-18.2 Refactoring with deserializers, destructuring, etc.mp4.mp4", duration: 568, published_at: "2019-10-20 10:00:00", code_summary: nil, course_id: 17, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Improving Admin Video Creation Workflow", description: "We need to upgrade our video creation workflow, so that's what we'll do in this video.\n\nThere are three other series about large, specific steps in this that are useful for everyone -- S3 uploads, Editing Markdown, and Nuxt Plugins -- but this video is just fixing all the paper cuts and making the experience better.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/733-22.0 Improving Admin Video Creation Workflow - VueJS and Nuxt.mp4.mp4", duration: 1054, published_at: "2019-11-03 08:00:00", code_summary: nil, course_id: 21, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Deleting a record with Vuex", description: "In this lesson we show how to create a delete button.  The button will delete a record using Vuex and a call to the server, but it will first confirm with the user that they really want to make the deletion.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/652-6.2 - Edit Page.mp4.mp4", duration: 444, published_at: "2019-09-18 10:00:00", code_summary: nil, course_id: 7, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "What Is Vuetify?", description: "[Vuetify](https://vuetifyjs.com/en/) is a UI library that follows the Material Design spec.  It offers lots of pre-made Components with a consistent theme, so you can get your app off the ground and looking decent quickly.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/634-Building a VueJS app part 3.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/061-3.1 - What Is Vuetify.mp4.mp4", duration: 211, published_at: "2019-09-11 09:00:00", code_summary: nil, course_id: 4, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Our First Reusable Component", description: "This lesson teaches about props and how to import and use a reusable component.\n\nThis is not our first Vue Component, but it is our first _reusable_ Vue Component.\n\nUp until now, we've being putting our Components in the \"views\" folder, because that's where Vue Router wants the Components associated with a route.  For this new component, we'll put it in the \"components\" folder and call it from other Components instead of from the Router.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/142-Building a VueJS app part 2.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/137-2.6 - Our First Reusable Component.mp4.mp4", duration: 379, published_at: "2019-09-09 07:00:00", code_summary: nil, course_id: 2, order: "7.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Introduction to Tracking Watched Videos", description: "A quick preview of what we'll be building in this mini-course.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/285-Building a VueJS app part 4.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/594-4.0 - Introduction to Tracking Watched Videos.mp4.mp4", duration: 28, published_at: "2019-09-13 07:00:00", code_summary: "", course_id: 5, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Introduction to Forms and Persisting Videos", description: "A quick preview of what we'll be building in this mini-course.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/546-5.0 Introduction to Forms and Persisting Videos.mp4.mp4", duration: 104, published_at: "2019-09-16 08:00:00", code_summary: nil, course_id: 6, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Using the Input tag and v-model in VueJS", description: "We create our first input tag, connecting it to our component with v-model and letting the user input data.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/409-5.1 Using the Input tag in VueJS.mp4.mp4", duration: 395, published_at: "2019-09-16 07:00:00", code_summary: nil, course_id: 6, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Mid-Course Review for Auth", description: "A quick review of everything we've done in this course so far.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/110-8-9.10 Mid-Course Review for Auth.mp4.mp4", duration: 466, published_at: "2019-09-24 18:00:00", code_summary: nil, course_id: 9, order: "11.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to Dynamic Slots", description: "We preview the table we'll be building in this course, show the component that inspired it, and show how to best prepare for the course.\n\n[Starter code is in the course-2-start branch](https://github.com/jeffreybiles/advanced-components-slots/tree/course-2-start).", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/437-34.0 Intro to Dynamic Tables.mp4.mp4", duration: 122, published_at: "2020-02-13 15:00:00", code_summary: nil, course_id: 33, order: "1.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Intro to MirageJS", description: "A preview of what we'll be learning, and part of the motivation behind this course.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/374-30.0 Intro.mp4.mp4", duration: 164, published_at: "2019-11-30 09:00:00", code_summary: nil, course_id: 29, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Named Slots - how to have two slots in one component", description: "Want to put custom markup in two different parts of your component?\n\nNamed Slots is how you do that.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/876-33.3 - Named Slots.mp4.mp4", duration: 200, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "2.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "CRUD for Admin page -- normalizing data for Mirage Post and Put", description: "We create all the endpoints required for the Admin pages, and learn how to normalize data in Mirage serializers.\n\n[Github Code](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/06c9a2f2a843f600155a05b39faf96a205f213cf)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/368-Mirage with Nuxt 7 - CRUD for videos, tags, and video_tags.mp4.mp4", duration: 692, published_at: "2020-01-31 00:00:00", code_summary: nil, course_id: 31, order: "8.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 4 - Half-Filled, Again", description: "If you're having trouble, look back on your solution to Exercise 1.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/854-33.7-E - Exercise 4 - Half-filled.mp4.mp4", duration: 23, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "8.0", pro: true, lesson_type: "Exercise", code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 5 - Feature Parity", description: "Remember: don't overthink this.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/695-33.8-E - Exercise 5 Feature Parity.mp4.mp4", duration: 49, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "9.0", pro: true, lesson_type: "Exercise", code: nil, code_summary_state: "not_ready"},
  {name: "Tags Page", description: "We start building the Tags page.  It will contain a listing of all the videos that are attached to that particular tag.\n\nThis lesson helps review and expand upon what we've learned about JSON API, Vuex, Vue Router, and more.\n\n[Github: Tags Page](https://github.com/jeffreybiles/vue-screencasts/commit/34191f7e3235f79fa5c2058df20ef21dda21cad8) (includes component refactor from next video)", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/842-Building a VueJS app part 2.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/189-2.5 - Tags Page.mp4.mp4", duration: 435, published_at: "2019-09-09 07:00:00", code_summary: nil, course_id: 2, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Scoped Slots", description: "Scoped Slots are how you get information from your Component into the user-defined Slots. \n\nThis is really useful for Components that do data processing for the user, as well as places where the slot is part of a loop inside the Component.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/867-25.4 Scoped Slots.mp4.mp4", duration: 224, published_at: "2019-11-07 13:00:00", code_summary: nil, course_id: 24, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Admin Page (+ Filters)", description: "In this lesson, we're going to build an Admin page that lets us easily view -- and soon, edit and delete -- all our videos.\n\nWhile building our custom data table (with obligatory zebra striping), we encounter Vue Filters, and see the pros and cons of that way of processing data.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/642-6.1 - Admin Page.mp4.mp4", duration: 676, published_at: "2019-09-18 09:00:00", code_summary: nil, course_id: 7, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Uploading Files with aws-s3", description: "The official AWS SDK can be difficult to use, so we're going to use the aws-s3 library instead.\n\nWe'll set up the configuration first, and I'll show you how to find all the information you'll need -- including stuff that S3 for some reason tries to hide from you, such as the key for your region.\n\nThen we'll compute a unique file name and upload the file.  There is an error in this process that I believe is caused by the aws-s3 library, and I'll show you how to work around it and make stuff work anyways.\n\nBecause we put our code in a component, we can easily use this for both the Thumbnail Image and the Video File", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/113-27.4 Uploading Files with aws-s3.mp4.mp4", duration: 932, published_at: "2019-11-12 13:00:00", code_summary: nil, course_id: 26, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Detecting End of Playback", description: "Mark the video as played once the video player reaches the end.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/224-Building a VueJS app part 4.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/126-4.4 - Detecting End of Video Playback.mp4.mp4", duration: 80, published_at: "2019-09-13 15:00:00", code_summary: "Add the following option to the video-player component:\n\n    @ended=\"markPlayed\"\n\nMaking it\n\n     <video-player ref=\"videoPlayer\"\n                 :options=\"playerOptions\"\n                 @ended=\"markPlayed\">\n    </video-player>\n\nIt call the function we created in the last video.", course_id: 5, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Tour of the Starting Code - A Table for Github Projects", description: "A quick tour of our starting code.\n\nWe start with a table component that is hard-coded to work with Github Projects, and a method to fetch those projects from the VueJS organization.\n\n[The Github Project](https://github.com/jeffreybiles/advanced-components-slots/tree/course-2-start)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/186-34.1 Tour of the Starting Code - A Table for Github Projects.mp4.mp4", duration: 325, published_at: "2020-02-13 15:00:00", code_summary: nil, course_id: 33, order: "2.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Review of Tracking Watched Videos Chapter", description: "We review what we've learned in the Tracking Watched Videos chapter, and discover that the `@` symbol is a shortcut for `v-on`.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/140-Building a VueJS app part 4.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/167-4.6 - Review.mp4.mp4", duration: 189, published_at: "2019-09-13 17:00:00", code_summary: nil, course_id: 5, order: "7.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review", description: "We review what we learned in this mini-course, going over the major code paths and seeing how they work together.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/421-5.5 - Review.mp4.mp4", duration: 220, published_at: "2019-09-16 17:00:00", code_summary: nil, course_id: 6, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to Validating Forms with Vuetify", description: "We take a quick preview of what will be covered in this chapter.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/174-7.0 Intro to Validating Forms with Vuetify.mp4.mp4", duration: 34, published_at: "2019-09-20 08:00:00", code_summary: nil, course_id: 8, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Navigation Guards", description: "Navigation Guards are a Vue Router feature that are useful for blocking off certain routes based on conditions in your app.\n\nIn the case of this lesson, we'll be blocking off the Admin section for everyone that isn't a logged in Admin User.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/603-8-9.11 Navigation Guards.mp4.mp4", duration: 336, published_at: "2019-09-25 20:00:00", code_summary: nil, course_id: 9, order: "12.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Nested Routes with Vue Router", description: "One way to protect all of our Admin Routes would be to copy the beforeEnter block from the last lesson and paste it in all the protected routes.\n\nA much more efficient method would be to make a parent route (Admin) with the beforeEnter block, then nest all the Admin-related routes that we want to protect under it.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/817-8-9.12 Nested Routes.mp4.mp4", duration: 496, published_at: "2019-09-25 21:00:00", code_summary: nil, course_id: 9, order: "13.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Showing Played status on video lists", description: "We apply a bunch of what we've learned in the previous videos, modifying it slightly so it works for the videos in the home page/tags page lists.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/842-Building a VueJS app part 4.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/629-4.5 - Showing Played status on video lists.mp4.mp4", duration: 165, published_at: "2019-09-13 16:00:00", code_summary: nil, course_id: 5, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Our First Snackbar Notification", description: "Our first snackbar will be in the video edit page.  When we click save, it will give us a nice unobtrusive notification on the bottom of the screen, telling us whether the video was edited properly or not.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/188-10.1 Our First Snackbar Notification.mp4.mp4", duration: 383, published_at: "2019-09-28 09:00:00", code_summary: nil, course_id: 10, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Why Mirage?", description: "Why would we choose to use MirageJS instead of other solutions like json-server, or building our own custom backend?\n\nCan we trust a library that hasn't reached version 1.0 yet?", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/656-30.1 Why Mirage.mp4.mp4", duration: 271, published_at: "2019-11-30 10:00:00", code_summary: nil, course_id: 29, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review", description: "A review of navigation guards, nested routes, and token authentication.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/455-8-9.14 Review.mp4.mp4", duration: 202, published_at: "2019-09-25 23:00:00", code_summary: nil, course_id: 9, order: "15.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Mirage Serializer's keyForAttribute", description: "We've added several new fields to the video, but they consist of multiple words, and Mirage does kebab-case while our server does snake_case.\n\nWe can fix this using the keyForAttribute property on our serializers.\n\n[Github Code](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/f0b42a6126c1b8686b65f9220bdd3138a6f08470)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/086-Mirage with Nuxt 9 - keyForAttribute.mp4.mp4", duration: 303, published_at: "2020-01-30 12:00:00", code_summary: nil, course_id: 31, order: "10.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Mirage and the Mark Played button", description: "A quick video that adds Mirage endpoints for marking videos as played.\n\n[Github Code](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/33bc8fd319559bc154766fc40f52eb136db5e62f)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/346-Mirage with Nuxt 10 - markPlayed button.mp4.mp4", duration: 142, published_at: "2020-01-31 00:00:00", code_summary: nil, course_id: 31, order: "10.5", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review of Admin CRUD in Vuex", description: "We review what we learned in this chapter.\n\n[Video where we show the corrected EDIT mutation](https://www.vuescreencasts.com/watch/188).", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/623-6.4 - Review of Admin CRUD.mp4.mp4", duration: 135, published_at: "2019-09-18 12:00:00", code_summary: nil, course_id: 7, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Removing Tags from Mirage", description: "[Github Code](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/e433e6f5bcec2a0b73786368c0b6e7399b13a891)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/815-Mirage with Nuxt 12 - Removing Tags.mp4.mp4", duration: 66, published_at: "2020-01-31 00:00:00", code_summary: nil, course_id: 31, order: "12.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to Nuxt Auth", description: "A quick preview of the concepts we're going to learn.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/186-20.0 Intro to Nuxt Auth.mp4.mp4", duration: 228, published_at: "2019-10-30 08:15:00", code_summary: nil, course_id: 19, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Edit Page, with Vuex", description: "In this lesson we create a form for the Video Edit screen, and then use it to alter an existing lesson.  The form itself is very similar to the form we used for creating a video, as is much of what we do in the component, but the techniques we use in Vuex are different.\n\n[Video where we show the correct EDIT mutation](https://www.vuescreencasts.com/watch/188).", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/012-6.3 - Edit Page.mp4.mp4", duration: 407, published_at: "2019-09-18 11:00:00", code_summary: nil, course_id: 7, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Validating Forms", description: "Validating individual inputs can help alert the user to issues, but we have to validate the entire form if we want to prevent them from inputting bad data.\n\nLuckily, Vuetify makes this easy for us with the `v-form` component.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/743-7.2 Validating Forms.mp4.mp4", duration: 169, published_at: "2019-09-20 10:00:00", code_summary: "Wrap the input fields in a v-form, then check the v-model property of the v-form when submitting.\n\n    <v-form v-model=\"valid\">\n      {{!-- input fields --}}\n      <v-btn @click=\"saveVideo\" :disabled=\"!valid\">Save Video</v-btn>\n    </v-form>\n\n", course_id: 8, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Using Vuetify Inputs", description: "Using pre-made components like Vuetify's v-text-field and v-text-area can save us a lot of effort, letting us make beautiful forms with ease.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/683-5.4 - Vuetify's Form Input Fields.mp4.mp4", duration: 160, published_at: "2019-09-16 13:00:00", code_summary: "    <v-text-field v-model=\"video.name\" label=\"Name\" />\n    <v-textarea v-model=\"video.description\" label=\"Description\" />\n    <v-text-field v-model=\"video.thumbnail\" label=\"Thumbnail URL\" />\n    <v-text-field v-model=\"video.videoUrl\" \n                 label=\"Video URL\" \n                 hint=\"If you want our friends in China to be able to watch this, please use Amazon S3 or similar instead of Youtube and Vimeo.\" />\n", course_id: 6, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Validating Inputs", description: "This lesson shows how to use the `rules` option on Vuetify's `v-text-field` (and other inputs) in order to validate individual fields.\n\nWe create three custom rules: required, minLength, and maxLength.  These are simple, and in fact have in-browser html equivalents, but they show the building blocks of how we can create other custom rules that aren't provided by html.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/250-7.1 Validating Inputs.mp4.mp4", duration: 677, published_at: "2019-09-20 09:00:00", code_summary: "We can add rules to a `v-text-field` or `v-textarea`.\n\n    <v-text-field v-model=\"video.thumbnail\" \n                 label=\"Thumbnail URL\" \n                 :rules=\"[required('thumbnail URL')]\" />\n\nYou can add multiple rules, and they'll process in the order you place them.\n\n    <v-text-field v-model=\"video.name\" \n                 label=\"Name\" \n                 counter=50\n                 :rules=\"[required('name'), minLength('name', 5), maxLength('name', 50)]\" />\n\nValidations can be defined on the data property.  It can either return `true` (valid), or an error in the form of a string.\n\n    data() {\n      return {\n        valid: false,\n        required(propertyType) { \n          return v => v && v.length > 0 || `You must input a ${propertyType}`\n        },\n        minLength(propertyType, minLength) {\n          return v => v && v.length >= minLength || `${propertyType} must be at least ${minLength} characters`\n        },\n        maxLength(propertyType, maxLength) {\n          return v => v && v.length <= maxLength || `${propertyType} must be less than ${maxLength} characters`\n        }\n      }\n    },", course_id: 8, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 0 - Raising Github API Rate Limit (updated)", description: "The Github API has a rate limit of 60 requests/hour if you're not authenticated. \n\nYou can raise that to 5,000 requests/hour by logging in or authenticating your code.\n\nLogging in via the command line like this may work for some.\n\n```\n$ curl -u \"yourusername\" https://api.github.com\n```\n<br>\n\n\nOthers will need to install dotenv and update their `findData` method as follows:\n\n    async findData(){\n      let url = `https://api.github.com/orgs/${this.username}/repos`;\n      let results = await this.axios.get(url, {\n        headers: {\n          'Authentication': `token ${process.env.VUE_APP_GITHUB_AUTH}`\n        }\n      });\n      this.projects = results.data;\n    },", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/230-34.2 Exercise 0 Updated - Github Auth.mp4.mp4", duration: 156, published_at: "2020-02-22 22:00:00", code_summary: nil, course_id: 33, order: "2.5", pro: true, lesson_type: "Exercise", code: nil, code_summary_state: "not_ready"},
  {name: "Intro to Authentication + Authorization", description: "This course shows how to add an authentication and authorization system to your app, step by step.\n\nWe'll be using an app created in previous courses, but you don't need to understand the old code in order to understand the auth system we're creating.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/027-8-9.0 Intro.mp4.mp4", duration: 151, published_at: "2019-09-24 08:00:00", code_summary: nil, course_id: 9, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Calculating and Displaying the Correct Number of Pages", description: "Hardcoding 10 pages, like we've been doing, won't usually work.\n\nTherefore, in this lesson, we're going to use the number of public repos in an organization to calculate the number of pages that we should show.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/895-36.3 Calculating and Displaying the Correct Number of Pages.mp4.mp4", duration: 306, published_at: "2020-02-27 17:00:00", code_summary: nil, course_id: 36, order: "4.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Creating our app with Vue-CLI", description: "Vue-CLI is a great way to run and organize your Vue app.  \n\nIn this tutorial, we install Vue-CLI and then use it to create our app.", thumbnail: "https://vue-screencasts.s3.us-east-2.amazonaws.com/video-files/Series%3A+Building+a+VueJS+App/Thumbnails/Building+a+VueJS+app+part+1.png", videoUrl: "https://vue-screencasts.s3.us-east-2.amazonaws.com/video-files/Series%3A+Building+a+VueJS+App/1.1+-+Vue-CLI.mp4", duration: 237, published_at: "2019-09-08 09:00:00", code_summary: "```bash\n$ yarn global add @vue/cli\n$ vue -V\n$ vue create\n$ vue ui\n$ yarn serve\n```\n\n", course_id: 1, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "ready"},
  {name: "Video Watch Page + mounting client libs w/SSR", description: "In this lesson we recreate the Video Watch Page.  \n\nWe once again use asyncData and axios to load data from the API, and copy over some display elements from our VueJS app, adjusting them for use in Nuxt.\n\nThe biggest change we have to deal with is in the vue-video-player library -- our old method of loading relied on several browser-only features, so we're going to have to change how we load it.  We'll switch to using a directive in the template, and then conditionally mounting the client-side code based on the value of process.browser.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/894-17.3 Video Watch Page and mounting client libs with SSR.mp4.mp4", duration: 913, published_at: "2019-10-19 11:00:00", code_summary: nil, course_id: 16, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Setting CurrentUser", description: "We're building up the steps of an authentication system, one by one.  This step is setting a currentUser in our Vuex state, then displaying their name in the navbar.  By doing this step now, we'll be able to get fast feedback when we start tackling the trickier parts of authentication.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/999-8-9.2 Setting CurrentUser.mp4.mp4", duration: 343, published_at: "2019-09-24 10:00:00", code_summary: nil, course_id: 9, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to VueJS Slots", description: "Slots are an incredibly useful tool - a great way to make your components more versatile and reusable.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/431-25.0 Intro to VueJS Slots.mp4.mp4", duration: 56, published_at: "2019-11-07 09:00:00", code_summary: nil, course_id: 24, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "UserAuthForm Component", description: "Soon we'll be wanting to make the Registration page, but to keep from repeating ourselves we're going to abstract the UserAuthForm Component from the Login page.\n\nWe'll pass in a `submitForm` function and a `buttonText` string, but the rest of the Component can be shared between the two pages.  When the user clicks the submit button, we'll call the `submitForm` function that was passed in.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/920-8-9.7 UserAuthForm Component.mp4.mp4", duration: 317, published_at: "2019-09-24 15:00:00", code_summary: nil, course_id: 9, order: "8.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Using v-autocomplete to show selected tags", description: "This lesson shows how to pull in data from the API and display it using the v-autocomplete component.\n\nAt this point we can edit the data, but we can't update it.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/879-12.2 Using v-autocomplete to show selected tags.mp4.mp4", duration: 256, published_at: "2019-10-04 10:00:00", code_summary: nil, course_id: 12, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Displaying Users", description: "Most authentication tutorials jump right in, leaving you with ten different things that could go wrong.  We're going to build our authentication system step by step, so that it's easier to understand and debug.\n\nThe first step is getting our users to display to admins, so we can start logging them in and out before we have to start messing with complex forms.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/645-8-9.1 Displaying Users.mp4.mp4", duration: 260, published_at: "2019-09-24 09:00:00", code_summary: nil, course_id: 9, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Basic Login Flow - Email and Password", description: "We create our login flow, letting the user log in to the app by input an email and password combination.  This connects to the Vuex action we built in the previous videos.\n\nWe also add some rudimentary error handling, using a try/catch block.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/824-8-9.4 Basic Login Flow - Email and Password.mp4.mp4", duration: 569, published_at: "2019-09-24 12:00:00", code_summary: nil, course_id: 9, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Saving currentUser to localStorage", description: "We're going to persist the currentUser to localStorage, so that when the user refreshes they'll still be logged in.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/414-8-9.3 Saving CurrentUser to localStorage.mp4.mp4", duration: 149, published_at: "2019-09-24 11:00:00", code_summary: nil, course_id: 9, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Hide/Show Password", description: "Hiding the user's password is a great default, but many users will want to be able to see what they're typing, especially with longer and more secure passwords.  \n\nThat's why we're creating the hide/show toggle option, which lets users switch back and forth between the two modes with the click of a button.  A helpful icon tells us which state the password is in.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/570-8-9.5 Hide-Show Password.mp4.mp4", duration: 361, published_at: "2019-09-24 13:00:00", code_summary: nil, course_id: 9, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "The User Registration Page", description: "The Registration Page is fairly similar to the Login page, but with enough differences to be interesting.  This helps us review everything we learned from the Login Page as we modify it to work for the new situation.\n\nWe also modify the UserAuthComponent so it'll fit the new demands we place upon it.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/241-8-9.8 The User Registration Page.mp4.mp4", duration: 437, published_at: "2019-09-24 16:00:00", code_summary: nil, course_id: 9, order: "9.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Navbar Cleanup", description: "We've created our registration and login pages, but our navbar has been left behind a little bit.  \n\nIn this lesson, we make logging in the currentUser from localStorage work on all screens, and we make our login and registration buttons work.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/743-8-9.9 Navbar Cleanup.mp4.mp4", duration: 152, published_at: "2019-09-24 17:00:00", code_summary: nil, course_id: 9, order: "10.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Introduction to Snackbar Notifications", description: "We need a way to notify users that their actions were successful (or unsuccessful).\n\nThis preview lesson shows why snackbars are a good choice for solving that issue, and why we're going to use Vuetify's snackbars.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/059-10.0 Introduction to Snackbar Notifications.mp4.mp4", duration: 132, published_at: "2019-09-28 08:00:00", code_summary: nil, course_id: 10, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to Connecting Tags", description: "A quick preview of what we'll be building in this chapter.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/372-12.0 Intro to Connecting Tags.mp4.mp4", duration: 52, published_at: "2019-10-04 08:00:00", code_summary: nil, course_id: 12, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Creating the Video Show Page", description: "Let's create a new page for viewing a video record.  It will show basic information, and in the next video we'll put in a list of tags.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/161-12.1 Creating the Video Show Page.mp4.mp4", duration: 200, published_at: "2019-10-04 09:00:00", code_summary: nil, course_id: 12, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "JSONAPI: Models, Serializers, and Shorthands", description: "MirageJS comes with a built-in JSON-API Serializer.  However, to take advantage of it, we'll have to learn a couple new concepts.\n\nThis is the MirageJS code required up to [this video](https://www.vuescreencasts.com/watch/13)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/977-30.3 JSONAPI: Models, Serializers, and Shorthands.mp4.mp4", duration: 137, published_at: "2019-11-30 12:00:00", code_summary: nil, course_id: 29, order: "2.5", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Mirage Route Shorthands", description: "Mirage has some nice shorthands to reduce boilerplate and make writing your routes easier.\n\n[Code on github](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/76491d0d1fd1edc1870afdf06be73141e6931434).", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/267-Mirage with Nuxt 3 - Mirage Shorthands.mp4.mp4", duration: 109, published_at: "2020-01-31 00:00:00", code_summary: nil, course_id: 31, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Vuetifying the Video Watch Page", description: "This lesson shows how we make our video watch page look good for screens of all sizes.  \n\nWe'll set the description and video beside each other on large screens, and stacked on top of one another on smaller screens, using Vuetify's grid and the fluid option on the video player.\n\nWe also review some utility classes to make our title, description, and buttons look right.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/518-Building a VueJS app part 3.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/481-3.5 Vuetifying the Video Watch Page.mp4.mp4", duration: 682, published_at: "2019-09-11 07:00:00", code_summary: "    <v-container>\n      <v-row>\n        <v-col md=\"9\" cols=\"12\">\n          <video-player ref=\"videoPlayer\"\n                        :options=\"playerOptions\">\n          </video-player>\n        </v-col>\n        <v-col md=\"3\" cols=\"12\">\n          <div class=\"display-1\">{{video.name}}</div>\n          <div v-html=\"video.description\"></div>\n          <span v-for=\"tag_id in video.tag_ids\" :key=\"tag_id\">\n            <v-btn :to=\"{ name: 'tag', params: {id: tag_id}}\"\n                  color=\"green lighten-2\"\n                  class=\"mr-1 mb-2\">\n              {{ getTag(tag_id).name }}\n            </v-btn>\n          </span>\n        </v-col>\n      </v-row>\n    </v-container>", course_id: 4, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review of Validating Forms with Vuetify", description: "A review of the entire chapter, covering the code we used to validate forms with Vuetify and the concepts we learned along the way.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/602-7.4 Review of Validating Forms with Vuetify.mp4.mp4", duration: 119, published_at: "2019-09-20 12:00:00", code_summary: nil, course_id: 8, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "App-wide Snackbar Component", description: "We want the user to be able to see our notifications wherever they are in the app, even if they change pages after a notification pops up.\n\nTo do that, we'll need to start putting the notifications where the entire app can access them -- the Vuex store -- and displaying them in App.vue.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/233-10.2 App-wide snackbar.mp4.mp4", duration: 643, published_at: "2019-09-28 09:00:00", code_summary: nil, course_id: 10, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Login Form Validations", description: "Form Validations can give the user feedback, letting them know what they need to do in order to input their data correctly.  \n\nIn this lesson, we use some validations we already have on the video edit form, abstracting them for use in our login form.  Then we create a new emailFormat validation to ensure the user is inputting something resembling an email.\n\nThis lesson does rely on some code from our Validations series, but if you haven't watched it, that's okay; we explain what you need to know at the start.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/891-8-9.6 Login Form Validations.mp4.mp4", duration: 401, published_at: "2019-09-24 14:00:00", code_summary: nil, course_id: 9, order: "7.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review", description: "A quick review of everything we learned in this chapter.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/059-11.3 Review.mp4.mp4", duration: 44, published_at: "2019-09-30 11:00:00", code_summary: nil, course_id: 11, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Token Authentication", description: "Everything up till now has been the equivalent of a digital \"no trespassing\" sign... true security starts and ends on the server.\n\nBut the client still has a very important role to play.\n\nIn this lesson, we show how to talk to the server correctly, passing in a token so that it knows we are who we say we are.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/822-8-9.13 Token Authentication.mp4.mp4", duration: 684, published_at: "2019-09-25 22:00:00", code_summary: nil, course_id: 9, order: "14.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 1 - Head and Foot slots", description: "Your assignment is to make the #head and #foot slots in VSTable.vue.\n\nThe component usage will look like this:\n\n```\n<VSTable :items=\"projects\">\n  <!-- ... item slot template omitted ... -->\n  <!-- new code -->\n  <template #head>\n    <th>Name</th>\n    <th>\n      <font-awesome-icon icon=\"star\" />\n      <font-awesome-icon icon=\"star\" />\n      <font-awesome-icon icon=\"star\" />\n    </th>\n    <th>Language</th>\n    <th>Here Be Dragons\n      <font-awesome-icon icon=\"dragon\" />\n    </th>\n    <th>Actions</th>\n  </template>\n  <template #foot=\"{items}\">\n    <td><strong>Totals</strong></td>\n    <td>{{sumBy(items, 'stargazers_count')}}</td>\n    <td></td>\n    <td>{{sumBy(items, 'open_issues')}}</td>\n    <td></td>\n  </template>\n</VSTable>\n```", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/663-34.4 Exercise 1 - Head and Foot slots.mp4.mp4", duration: 118, published_at: "2020-02-13 15:00:00", code_summary: nil, course_id: 33, order: "4.0", pro: true, lesson_type: "Exercise", code: nil, code_summary_state: "not_ready"},
  {name: "Showing Multiple Snackbars", description: "By stacking multiple snackbars on top of each other, we can send the user multiple messages.\n\nAside from the utility of sending them multiple different messages, they'll also be able to tell when we send them the same message multiple times - such as a login/password error.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/557-10.3 Showing Multiple Snackbars.mp4.mp4", duration: 382, published_at: "2019-09-28 11:00:00", code_summary: nil, course_id: 10, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review of Snackbar Notifications", description: "A quick review of all the code we wrote while creating the snackbar notifications.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/793-10.4 Review of Snackbar Notifications.mp4.mp4", duration: 187, published_at: "2019-09-28 12:00:00", code_summary: nil, course_id: 10, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to refactoring persistence to server", description: "The only reason we put `playedVideos` on localStorage was because we didn't have a secure authentication system.\n\nNow we do.\n\nSo we're going to put them on the server.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/822-11.0 Intro to Refactoring Persistence from localstorage to server.mp4.mp4", duration: 30, published_at: "2019-09-30 08:00:00", code_summary: nil, course_id: 11, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Loading Video Plays", description: "In this lesson we take played_videos from the stored currentUser, then use that to replace the played_videos from localstorage.\n\nWe review Vuex, abstract a Vuex getter, and learn about when we need to use Vue.set.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/719-11.1 Loading Video Plays.mp4.mp4", duration: 621, published_at: "2019-09-30 09:00:00", code_summary: nil, course_id: 11, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Slots for Table Rows", description: "This is our first step in making the VSTable Component customizable.\n\nHaving the entire table row be a slot is low-resolution but effective.  It also gives us a chance to review named slots and scoped slots before getting into the more advanced usages.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/563-34.3 Slots for Table Rows.mp4.mp4", duration: 291, published_at: "2020-02-13 15:00:00", code_summary: nil, course_id: 33, order: "3.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Solution to Head and Foot Slots Exercise", description: "Solution to the Head and Foot slots exercise", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/666-34.4 Answer 1 - Head and Foot slots.mp4.mp4", duration: 72, published_at: "2020-02-13 15:00:00", code_summary: nil, course_id: 33, order: "5.0", pro: true, lesson_type: "Answer", code: nil, code_summary_state: "not_ready"},
  {name: "Adding and Removing Tags", description: "We first try the obvious method for adding and removing tags -- taking the updated array and setting it in the store -- but that causes a bug.\n\nThe method we settle on is using underscore's `differenceBy` function to uncover what tag has been added or removed, then sending that one tag to Vuex.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/339-12.4 Adding and Removing Tags.mp4.mp4", duration: 860, published_at: "2019-10-04 12:00:00", code_summary: nil, course_id: 12, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "A Simple Table", description: "We create a table using the most basic form of v-data-table, one that takes two props: items and headers.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/554-28.1 A Simple Table.mp4.mp4", duration: 142, published_at: "2019-11-22 10:00:00", code_summary: nil, course_id: 27, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Custom Item (Column) Slots", description: "The default display of a column isn't always ideal, so v-data-table provides a great outlet by offering the ability to create a custom slot per column.\n\nIn this tutorial video we'll create two custom slots, one for displaying the date in a human-readable way and the other for translating seconds into minutes and seconds.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/943-28.2 Custom Item (Column) Slots.mp4.mp4", duration: 399, published_at: "2019-11-22 11:00:00", code_summary: nil, course_id: 27, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Custom Sorting", description: "The default sorting method in v-data-table is sorting alphabetically on the value property.  However, sometimes that has surprising results - such as our date sorting based on the first letter of the day of the week.\n\nIn this video tutorial we munge our data so it's in an easier-to-sort format, but make sure it's still displayed correctly.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/768-28.3 Custom Sorting.mp4.mp4", duration: 273, published_at: "2019-11-22 12:00:00", code_summary: nil, course_id: 27, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to One-Page CRUD Tutorial", description: "A quick preview of the CRUD page we'll be building and the steps we'll take to get there.\n\nWe'll be using the app from our giant Build This Site course, but you should be able to follow along with 98% of this course without having watched previous videos.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/726-14.0 Intro to CRUD sequence.mp4.mp4", duration: 94, published_at: "2019-10-06 08:00:00", code_summary: nil, course_id: 13, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "VideoTable Component", description: "We take our v-data-table and put it into a reusable component, which we then use in the home page and the tags page.\n\nThe only differences for now are the videos passed in, but we'll be making this component more customizable in a later video.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/651-28.4 VideoTable Component.mp4.mp4", duration: 289, published_at: "2019-11-22 13:00:00", code_summary: nil, course_id: 27, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Bonus - Add new tags with Vuetify's Combobox", description: "What if the autocomplete box doesn't have the tag you want?\n\nOne option is to go create it in a separate screen.\n\nAnother option is to use a Combobox to add it right there.  That's the option we're taking in this video - it's such a cool feature, and Vuetify makes it (relatively) easy!", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/029-12.6 Bonus - Create new tags with Vuetify's ComboBox.mp4.mp4", duration: 849, published_at: "2019-10-04 14:00:00", code_summary: nil, course_id: 12, order: "7.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Inline Editing (CRUD Update)", description: "The user wants to change the name of a tag, but without going to a new screen.  Our solution is to let them click on the name and have it turn immediately into an editable text field.\n\nThe Vuex implementation doesn't contain any surprises, but the UI for this is interesting.  Our solution involves learning new events, then using setTimeout/$nextTick to make sure stuff happens in the right order.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/217-14.2 Inline editing (CRUD Update).mp4.mp4", duration: 628, published_at: "2019-10-06 10:00:00", code_summary: nil, course_id: 13, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Column Slots", description: "We provide a slot that can be used to customize the display in specific columns - a higher-resolution strategy than replacing the entire row.\n\nHowever, even though it makes using VSTable Component much easier, the code inside the component needs to be improved - we'll be doing that in the next video.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/998-34.5 Column Slots.mp4.mp4", duration: 194, published_at: "2020-02-13 15:00:00", code_summary: nil, course_id: 33, order: "6.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Creating a Tags Admin Page (CRUD: READ)", description: "To start this course, we're going to build an Admin page for our tags.\n\nWe'll use a lot of the pre-existing styling for other Admin pages we've built, so it'll fit in easily.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/715-14.1 Creating a Tags Admin page (READ).mp4.mp4", duration: 255, published_at: "2019-10-06 09:00:00", code_summary: nil, course_id: 13, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review", description: "Reviewing the code we used to create the CRUD actions on our Tags page.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/508-14.5 Review.mp4.mp4", duration: 302, published_at: "2019-10-06 13:00:00", code_summary: nil, course_id: 13, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Why we'll be using Computed Setters", description: "There are several good options for updating the list of connected tags.  We chose to use Computed Setters.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/407-12.3 Why we'll be using Computed Setters.mp4.mp4", duration: 216, published_at: "2019-10-04 11:00:00", code_summary: nil, course_id: 12, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review", description: "A quick review of the code written in this chapter.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/233-12.5 Review.mp4.mp4", duration: 308, published_at: "2019-10-04 13:00:00", code_summary: nil, course_id: 12, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Basic Slots", description: "We show the most basic form of slot using the VSButton Component.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/663-33.1 - Basic Slots.mp4.mp4", duration: 221, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "1.25", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Pagination Slots Conclusion", description: nil, thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/394-37.4 Conclusion.mp4.mp4", duration: 100, published_at: "2020-03-05 11:00:00", code_summary: nil, course_id: 37, order: "4.0", pro: true, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Deleting Tags (CRUD Delete)", description: "Deleting tags is a fairly simple workflow that just involves applying what we've learned before.\n\nBecause the action is irreversible, and it can effect multiple videos, we make the user confirm that they really want to delete the tag.\n\nWe also do a bit of cleanup towards the end of the video.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/763-14.3 Deleting Tags (CRUD Delete).mp4.mp4", duration: 274, published_at: "2019-10-06 11:00:00", code_summary: nil, course_id: 13, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Adding Tags, Inline (CRUD Create)", description: "In this lesson, we learn how to create a new Tag in our one-page CRUD interface.  The technique is very similar to what we did for editing a tag, with a few extra wrinkles.\n\nWe also face a double-creation bug, and learn how to troubleshoot actions that can trigger multiple times but aren't idempotent.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/964-14.4 Adding Tags, Inline (CRUD Create).mp4.mp4", duration: 465, published_at: "2019-10-06 12:00:00", code_summary: nil, course_id: 13, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Conclusion", description: "Conclusion, and a look ahead at the next course.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/849-33.12 - Conclusion.mp4.mp4", duration: 59, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "15.0", pro: nil, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Switching to JSON API", description: "In preparation for adding a Tags relationship in the next lesson, we're switching to JSON API in this one.\n\nJSON API is a specification that tells the server and client how to communicate, so that they can both know what to expect.  It is able to handle relationships in a consistent manner, which is invaluable when using it in a large application.\n\n[Video for MirageJS](https://www.vuescreencasts.com/watch/173)\n\n[Code for MirageJS](https://github.com/jeffreybiles/vue-screencasts/commit/9b5744fdb08c75e977effb090c9bbd738827ae18)\n\n[Code for processing MirageJS](https://github.com/jeffreybiles/vue-screencasts/commit/47b6695f2e0aed88f7fa800171f7be09a6609a42) \n\n[Ruby on Rails code](https://github.com/jeffreybiles/vue-screencasts-server/tree/0d1a380979caa6418143bb811ad1e983608c20c3)\n", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/425-Building a VueJS app part 2.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/251-2.3 - Switching to JSON API.mp4.mp4", duration: 309, published_at: "2019-09-09 07:00:00", code_summary: nil, course_id: 2, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Why Refactor to Vuex Modules?", description: "Vuex stores can get unwieldy.  We go over our current Vuex store and show why we want to refactor it into Vuex Modules.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/625-15.0 Why Refactor to VueX Modules.mp4.mp4", duration: 47, published_at: "2019-10-07 08:00:00", code_summary: nil, course_id: 14, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Refactoring all the other Vuex Modules", description: "We take what we learned in the previous lesson and apply it to the rest of our Vuex store, creating three more Vuex Modules.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/864-15.2 Refactoring all the other VueX Modules.mp4.mp4", duration: 739, published_at: "2019-10-07 10:00:00", code_summary: nil, course_id: 14, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to Vuetify's v-data-table", description: "A preview of the feature that we're going to build in this course, and what we're going to learn: using v-data-table's slots and props, sorting and filtering, making expandable rows, making dynamic headers, and more!", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/860-28.0 Intro to Vuetify's v-data-table.mp4.mp4", duration: 159, published_at: "2019-11-22 09:00:00", code_summary: nil, course_id: 27, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Slots vs Props", description: "When is it better to use Slots, and when is it better to use Props?", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/642-25.1 Slots vs Props.mp4.mp4", duration: 241, published_at: "2019-11-07 10:00:00", code_summary: nil, course_id: 24, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Installing Nuxt", description: "Installing Nuxt, creating our first Nuxt app from the command line, running it, and visiting our page in the browser.\n\nWe also learn how to change the localhost port where our Nuxt app runs.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/200-16.2 Installing Nuxt.mp4.mp4", duration: 269, published_at: "2019-10-14 10:00:00", code_summary: nil, course_id: 15, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Exploring the Project Structure", description: "When I start a new project, I like to know what all the auto-generated files and folders do.  So in this video we go on a brief tour of the generated NuxtJS app, seeing what's been created for us and where everything goes.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/646-16.3 Exploring the Project Structure.mp4.mp4", duration: 351, published_at: "2019-10-14 11:00:00", code_summary: nil, course_id: 15, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Pages and Routing", description: "We create our first pages, and learn how to use Nuxt to replicate many of the features of a typical Vue Router, including params and nested routes.\n\nWe also go over nuxt-link, index pages, and the nuxt-child component.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/921-16.4 Pages and Routing.mp4.mp4", duration: 749, published_at: "2019-10-14 12:00:00", code_summary: nil, course_id: 15, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Navbar and Layouts", description: "Layouts are where you put the html and code that's in every page of your app - such as a navbar.\n\nIn this lesson we create a basic navbar in the default layout, and then we create an alternate layout and learn how to use that layout for specific top-level pages.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/328-16.5 Navbar and Layouts.mp4.mp4", duration: 579, published_at: "2019-10-14 13:00:00", code_summary: nil, course_id: 15, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "'Tags' and 'Played' Columns", description: "Not all columns have to be simple data display.\n\nIn this lesson we show how to create even more interesting tables by pulling data from sources other than the item, displaying it in a unique way, and providing a way for the user to interact with and change the data.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/404-28.5 Tags and Played Columns.mp4.mp4", duration: 515, published_at: "2019-11-22 14:00:00", code_summary: nil, course_id: 27, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Expandable Rows", description: "A row in a data table can only hold so much information... what if you want to show more, but don't want the user clicking away?\n\nOne great answer is expandable rows.  Click the caret on the left and now you have a lot more room to work with.  In this tutorial we use it to show a video preview and the video's description, but if you do this on an admin page, you could even have a set of common edits available!", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/207-28.6 Expandable Rows.mp4.mp4", duration: 267, published_at: "2019-11-22 15:00:00", code_summary: nil, course_id: 27, order: "7.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "DataTable Events", description: "We want clicking on a row to take the user to that video... BUT we don't want it to happen when clicking around the tag buttons, since they're small enough that it's easy for a user to mis-click.\n\nHow do we make this happen?\n\nBy using the @click:row event, and then applying @click.stop to the columns where we don't want the event to work.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/686-28.7 DataTable Events.mp4.mp4", duration: 426, published_at: "2019-11-22 16:00:00", code_summary: nil, course_id: 27, order: "8.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Custom Search and Filtering", description: "When you have a large collection of data, users will want to filter through it quickly.  Adding a search bar is easy, and v-data-table comes with a decent default search.\n\nHowever, for more complex data, the default search won't work.  That's why v-data-table offers a custom filtering option.  In this lesson, we show how that works.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/421-28.8 Custom Search and Filtering.mp4.mp4", duration: 430, published_at: "2019-11-22 17:00:00", code_summary: nil, course_id: 27, order: "9.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Dynamic Columns (abstracting VideoTable)", description: "We want to use the VideoTable Component in our Admin page, but there will have to be some changes.  We don't need the Played column, we want to add an Actions column, and we want to change the spacing and number of rows.\n\nWe can accomplish that by passing in headers to the component and adding a few more props.  By the end of this video you'll see how the Components you create based on v-data-table can be massively flexible, reusing whichever rows you want and ignoring the rest.\n\nWe don't do it in this video, but you could even have users selecting which rows they want to see, making the columns truly dynamic!", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/008-28.9 Dynamic Columns (making VideoTable fit the needs of the Admin page and the home page).mp4.mp4", duration: 826, published_at: "2019-11-22 18:00:00", code_summary: nil, course_id: 27, order: "10.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review", description: "A review of all the code we've written for this course.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/726-28.10 Review.mp4.mp4", duration: 571, published_at: "2019-11-22 19:00:00", code_summary: nil, course_id: 27, order: "11.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Refactoring a Simple(ish) Vuex Module", description: "In this lesson, we take the parts of our Vuex store that are related to the Snackbar and move them into a Vuex Module.\n\nWe chose the snackbar-related state/mutations/actions because they're relatively simple, but will still let us see the basics: how to separate out the relevant functions, then how to access module state and call module actions from your component.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/606-15.1 Refactoring A Simple(ish) Module.mp4.mp4", duration: 625, published_at: "2019-10-07 09:00:00", code_summary: nil, course_id: 14, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Our First Mirage Endpoint", description: "Let's create our first MirageJS endpoint: `/api/videos`\n\nWe start with feeding the endpoint our data directly.\n\nThen we refactor so the data is in the JSON file, which we load into a database so it can easily be reused between endpoints.\n\nThis is the Mirage code required for [this video](https://www.vuescreencasts.com/admin/videos/10).\n\n[Github: Installing Mirage](https://github.com/jeffreybiles/vue-screencasts/commit/bdad73d27c70bc607ec0ca76601729dec75f477f)\n\n[Github: Video JSON](https://github.com/jeffreybiles/vue-screencasts/commit/e1e90186c78b2e1d2641be1dbb374c2ab0e26dfd)\n\n[Github: Loading videos from DB](https://github.com/jeffreybiles/vue-screencasts/commit/c7b8e4c2eb89310385bf5adcc8c26b1bf9b77194)\n\n", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/911-30.2 Our First Mirage Endpoint.mp4.mp4", duration: 368, published_at: "2019-11-30 11:00:00", code_summary: nil, course_id: 29, order: "2.25", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "From asyncData to Vuex (naive version)", description: "In this video, we take the functions in our asyncData hooks and translate them into Vuex.  \n\nWe'll use the fetch hook to trigger Vuex actions, then the rest of the app will get data from Vuex's state.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/432-18.1 From asyncData to VueX, naive version.mp4.mp4", duration: 786, published_at: "2019-10-20 09:00:00", code_summary: nil, course_id: 17, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Installing Nuxt Auth and using $auth.user", description: "In this lesson we install Nuxt Auth, and see how to use $auth.user and $auth.loggedIn.\n\nWe create a dynamic navbar which will handle linking to our login and register pages, as well as the logout action.  Once we get our user connected, this navbar will give us instant feedback.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/289-20.1 Installing Nuxt Auth and using authuser .mp4.mp4", duration: 263, published_at: "2019-10-30 09:00:00", code_summary: nil, course_id: 19, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Why Nuxt?", description: "Nuxt offers a bunch of advantages over plain VueJS, including \n\n* easy Server-Side Rendering (SSR), \n* automatic code splitting, \n* easier async data, and \n* a routing solution with massive reductions in boilerplate.\n\nThe downside is that there's no upgrade process to take one codebase from Vue to Nuxt: if you have an existing VueJS app of any size, you'll have to create a fresh Nuxt app and then port it all over.  \n\nHowever, this isn't quite as bad as it seems at first -- your Components and Vuex stores won't have to change much if at all, and everything else you could do in Vue has an equivalent in Nuxt.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/373-16.1 Why Nuxt.mp4.mp4", duration: 243, published_at: "2019-10-14 09:00:00", code_summary: nil, course_id: 15, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Vuex and Fetch in Nuxt", description: "Nuxt gives you a few more tools than plain VueJS at handling data, but as your app gets larger you'll still probably want to add Vuex.\n\nThis lesson shows how to use the asynchronous fetch hook to load data into Vuex, how to create your Vuex Store in Nuxt, and then how to access the data from within your components.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/314-16.8 VueX and Fetch in Nuxt.mp4.mp4", duration: 553, published_at: "2019-10-14 16:00:00", code_summary: nil, course_id: 15, order: "9.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Better Forms with the Changeset Pattern, Part 2", description: "Now that we've created the basic pattern, and fixed the bug we uncovered, we can complete our form's transition to the changeset pattern.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/196-32.4 Changeset part 2.mp4.mp4", duration: 94, published_at: "2020-01-24 14:00:00", code_summary: nil, course_id: 30, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Preloading, Middleware, and Promises", description: "We’re going to preload all of our data.  We’ll accomplish this in several steps.\n\n1. Separate out loadAllTags from loadAllVideos\n2. Call our loadAll methods from all fetch hooks, remove unused Vuex actions\n3. Make the correct videos show up on the tags page\n4. Ensure no repeat API calls\n5. Using middleware to preload data\n6. Use Promises (RSVP.all or Promise.all) to make API calls in parallel", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/610-18.4 Preloading, Middleware, and Promises.mp4.mp4", duration: 799, published_at: "2019-10-20 12:00:00", code_summary: nil, course_id: 17, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 2 Answer", description: "Answer to Exercise 2.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/755-33.5-A - Exercise 3 Rounding.mp4.mp4", duration: 102, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "5.5", pro: true, lesson_type: "Answer", code: nil, code_summary_state: "not_ready"},
  {name: "Dynamic Column Slots", description: "This is the core of the course: making the slots dynamic.\n\nUsing a simple array, we can now generate all of the column slots and their default content.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/627-34.6 Dynamic Column Slots.mp4.mp4", duration: 337, published_at: "2020-02-13 15:00:00", code_summary: nil, course_id: 33, order: "7.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 1 Answer", description: "Answer to Exercise 1.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/380-33.4-A - Exercise 1 Answer.mp4.mp4", duration: 59, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "4.0", pro: true, lesson_type: "Answer", code: nil, code_summary_state: "not_ready"},
  {name: "axios, asyncData, and one downside of SSR", description: "In this lesson we learn how to use axios and the asyncData hook to get data from the server.\n\nWe also run into an issue with debugging -- because the initial page render is on the server, our console.log and debugger statements don't run like we expect.\n\nOnce we have our first API calls working, we then learn some tricks to make further API calls shorter and easier.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/042-16.6 asyncData and Axios.mp4.mp4", duration: 557, published_at: "2019-10-14 14:00:00", code_summary: nil, course_id: 15, order: "7.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Meta Tags (Great for SEO!)", description: "This lesson shows how to define custom Meta tags in NuxtJS, starting with the one most visible to our users -- the Title tag that's shown on our browser's tabs.\n\nWe learn about the titleTemplate option as well, and how it works within the page hierarchy.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/268-16.7 Meta Tags.mp4.mp4", duration: 427, published_at: "2019-10-14 15:00:00", code_summary: nil, course_id: 15, order: "8.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review of Nuxt Basics", description: "We go over the code we wrote for our Intro to Nuxt course, and review the basic concepts we learned.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/923-16.9 Review.mp4.mp4", duration: 657, published_at: "2019-10-14 17:00:00", code_summary: nil, course_id: 15, order: "10.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Installing and using Vuetify in Nuxt", description: "We install the Vuetify Nuxt module and use it to create a much nicer navbar.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/355-17.1 Installing and using Vuetify in Nuxt.mp4.mp4", duration: 294, published_at: "2019-10-19 09:00:00", code_summary: nil, course_id: 16, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Creating the Home Page, Debugging in Nuxt", description: "We create the Home page, using our old Home page as a blueprint.  \n\nWe're going to be using asyncData hook to load data, then Vuetify and Components to build the page.\n\nAlong the way we'll run into some debugging trouble and learn some ways to work around the difficulties caused by Nuxt's SSR.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/122-17.2 Creating the Home Page, Debugging in Nuxt.mp4.mp4", duration: 833, published_at: "2019-10-19 10:00:00", code_summary: nil, course_id: 16, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Login and Register Pages", description: "We take the UserAuthForm Component that we've created in a previous video and use it in our new pages.  \n\nWe briefly go over how the UserAuthForm Component works.  More importantly, we show the data the component takes, and the data we get once the user hits the Submit button.\n\nCheck out [the course where we make the UserAuthForm Component](https://www.vuescreencasts.com/courses/9).", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/291-20.2 Login and Register Pages.mp4.mp4", duration: 319, published_at: "2019-10-30 10:00:00", code_summary: nil, course_id: 19, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Loading Strategies for Vuex", description: "In this lesson, we go over the three main data loading strategies, where they’re useful, and decide which one we’ll be using for our app.\n\nThe three main strategies are:\n* Load and Dump (asyncData does this)\n* Preloading, and\n* Cacheing", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/708-18.3 Loading Strategies for VueX.mp4.mp4", duration: 293, published_at: "2019-10-20 11:00:00", code_summary: nil, course_id: 17, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review of Nuxt + Vuex", description: "A quick review of the code we wrote in this course.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/623-18.5 Review of Nuxt with VueX.mp4.mp4", duration: 233, published_at: "2019-10-20 13:00:00", code_summary: nil, course_id: 17, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Error Handling and User Notifications", description: "We need to let users know whether their login has succeeded or failed.\n\n[Course where we build notifications](https://www.vuescreencasts.com/courses/10).", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/944-20.4 Error Handling and User Notifications.mp4.mp4", duration: 257, published_at: "2019-10-30 12:00:00", code_summary: nil, course_id: 19, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Moving Admin to Nuxt", description: "We move all of the Admin pages from our old VueJS app into Nuxt.  If you love watching sped-up coding, go ahead and watch!  Otherwise, feel free to go on to the next chapter.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/286-19.0 Moving Admin to Nuxt.mp4.mp4", duration: 1526, published_at: "2019-10-30 08:00:00", code_summary: nil, course_id: 18, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Configuring and using the loginWith function", description: "The loginWith function is the core of Nuxt Auth.\n\nWe take a username and password and get a token from the server, and then use that token -- attached to our headers -- to get a user.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/437-20.3 Configuring and using the loginWith function.mp4.mp4", duration: 844, published_at: "2019-10-30 11:00:00", code_summary: nil, course_id: 19, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Auth Middleware", description: "We learn how to use Nuxt Auth's built-in middleware that only lets in users if they're logged in.\n\nThen we create our own, a piece of middleware that only lets in Admin users.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/408-20.5 Auth Middleware.mp4.mp4", duration: 277, published_at: "2019-10-30 13:00:00", code_summary: nil, course_id: 19, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review of Nuxt Auth", description: "A quick review of everything we learned about Nuxt Auth.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/369-20.6 Review of Nuxt Auth.mp4.mp4", duration: 216, published_at: "2019-10-30 14:00:00", code_summary: nil, course_id: 19, order: "7.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to Deploying Nuxt SSR app on Heroku", description: "We're going to be deploying a Nuxt app in Universal Mode - that is, with Server-Side Rendering (SSR) and rehydration - to Heroku.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/539-21.0 Intro to Deploying Nuxt on Heroku.mp4.mp4", duration: 53, published_at: "2019-11-01 08:00:00", code_summary: nil, course_id: 20, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Choosing a Strategy for Deploying Nuxt", description: "There are 10 different deployment options listed in the official VueJS documentation, and 5 of them will work for SSR apps.  We choose Heroku for this course.\n\nIn the second half of the video we talk about how we go about deploying piece by piece, so it's easier to catch and fix errors.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/608-21.1 Choosing a Strategy for Approaching Deployment.mp4.mp4", duration: 215, published_at: "2019-11-01 09:00:00", code_summary: nil, course_id: 20, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Deploying a basic Nuxt app to Heroku", description: "We start with the simplest case, the one covered in dozens of other videos... but in order to get to the complex stuff, we have to cover the basics first.  \n\nSo in this lesson, we're creating our app on Heroku and deploying the most bare-bones Nuxt code to it.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/910-21.2 Deploying a basic Nuxt app to Heroku.mp4.mp4", duration: 496, published_at: "2019-11-01 10:00:00", code_summary: nil, course_id: 20, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Connecting Heroku App to the API Server", description: "When we started talking to the API, the Heroku app initially failed to connect.\n\nTo fix that, we updated the configuration for the PORT and the BASE_URL so that were no longer hard-coded -- so there could be different values for development and production.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/859-21.3 Connecting to the API Server.mp4.mp4", duration: 489, published_at: "2019-11-01 11:00:00", code_summary: nil, course_id: 20, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Deploying the Complete Nuxt App to Heroku", description: "We catch our Heroku deploy up to the current state of the app.\n\nThe only issue that comes up is when we accidentally feed a null value to a Vuetify component.  We fix that and then everything works great!", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/663-21.4 Deploying the Complete Nuxt App to Heroku.mp4.mp4", duration: 316, published_at: "2019-11-01 12:00:00", code_summary: nil, course_id: 20, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review of Deploying Nuxt App to Heroku", description: "A quick review of everything we learned in this course.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/352-21.5 Review of Deploying Nuxt App to Heroku.mp4.mp4", duration: 61, published_at: "2019-11-01 13:00:00", code_summary: nil, course_id: 20, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Post, Put, and Delete in MirageJS", description: "We show how to mock put, post, and delete in MirageJS.\n\n[Github: Post in Mirage](https://github.com/jeffreybiles/vue-screencasts/commit/b6dbb0bb72c4d2b9f70506bb0660c8835d7b728e)\n\n[Github: Put and Delete in Mirage](https://github.com/jeffreybiles/vue-screencasts/commit/05e9032d8b39bd5dcbab5e38d19fbd7671d54b9d)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/675-30.5 Post, Put, and Delete in MirageJS.mp4.mp4", duration: 137, published_at: "2019-11-30 14:00:00", code_summary: nil, course_id: 29, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Using Libraries in Nuxt vs in Vue", description: "Using Libraries in Nuxt isn't always as simple as using those same libraries in Vue.\n\nSome will have a special Nuxt Module that you can install.  Others will have special instructions for SSR (including Nuxt).  Some might even work out of the box.\n\nFor the rest, there's plugins.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/502-23.0 Using Libraries in Nuxt vs in Vue.mp4.mp4", duration: 64, published_at: "2019-11-04 09:00:00", code_summary: nil, course_id: 22, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Creating a Nuxt Plugin", description: "We install the vuetify-datetime-picker library: creating the plugin file, registering it in nuxt.config, and making sure the ES6 is transpiled.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/194-23.1 Creating a Nuxt Plugin.mp4.mp4", duration: 324, published_at: "2019-11-04 10:00:00", code_summary: nil, course_id: 22, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Integrating vuetify-datetime-picker", description: "The plugin is installed, so now let's actually use it.\n\nWe make sure the datetime is saved, then take care of some data presentation issues.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/594-23.2 Integrating vuetify-datetime-picker.mp4.mp4", duration: 306, published_at: "2019-11-04 11:00:00", code_summary: nil, course_id: 22, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to Markdown and Syntax Highlighting", description: "We take a look at what we'll be building and learning in this course.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/335-24.0 Intro to Markdown and Syntax Highlighting in VueJS.mp4.mp4", duration: 75, published_at: "2019-11-05 09:00:00", code_summary: nil, course_id: 23, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Displaying Markdown with marked.js", description: "We install the marked.js library and use it to display the Markdown we've written for our descriptions and code summaries.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/619-24.1 Displaying Markdown with MarkedJS.mp4.mp4", duration: 233, published_at: "2019-11-05 10:00:00", code_summary: nil, course_id: 23, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Building the MarkdownDisplay Component", description: "In this lesson we create a component that displays Markdown, encapsulating all the logic with marked.js.\n\nThis isn't a very complex component yet, but this encapsulation will pay off as the amount we want to do with our markdown grows.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/354-24.2 Building the MarkdownDisplay Component.mp4.mp4", duration: 229, published_at: "2019-11-05 11:00:00", code_summary: nil, course_id: 23, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Code Highlighting with HighlightJS", description: "In this lesson we integrate the HighlightJS library and use it to highlight our code samples.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/248-24.3 Code Highlighting with highlightJS.mp4.mp4", duration: 359, published_at: "2019-11-05 12:00:00", code_summary: nil, course_id: 23, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "LivePreview Editor", description: "We build a way for the user to edit markdown and see a live preview of what it'll look like.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/031-24.4 LivePreview Editor.mp4.mp4", duration: 290, published_at: "2019-11-05 13:00:00", code_summary: nil, course_id: 23, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review and Look Ahead", description: "A quick review, and then a look ahead at the motivation for our Vue Slots course.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/564-24.5 Review and look ahead.mp4.mp4", duration: 97, published_at: "2019-11-05 14:00:00", code_summary: nil, course_id: 23, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Basic Slots", description: "In this video we create a simple slot without any bells or whistles.. and already our code is much cleaner!", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/209-25.2 Basic Slots.mp4.mp4", duration: 206, published_at: "2019-11-07 11:00:00", code_summary: nil, course_id: 24, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Named Slots", description: "Named Slots are a way to create multiple slots per Component.  This is very useful if you have multiple places where you want to place custom content!", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/418-25.3 Named Slots.mp4.mp4", duration: 368, published_at: "2019-11-07 12:00:00", code_summary: nil, course_id: 24, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review of VueJS Slots", description: "A quick review of what we learned about VueJS's Slots.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/950-25.5 Review of VueJS Slots.mp4.mp4", duration: 109, published_at: "2019-11-07 14:00:00", code_summary: nil, course_id: 24, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to the Making Our App Nicer chapter", description: "A quick overview of the goals of this chapter, and the steps we're going to take.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/230-26.0 Intro to the Making Our VueJS App Look Nicer chapter.mp4.mp4", duration: 92, published_at: "2019-11-11 09:00:00", code_summary: nil, course_id: 25, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Clarifying the Video Edit Page", description: "We rearrange our Video Edit Form so all the simpler inputs are near the top, and then we restyle our duration display so that it's in line with the duration input.\n\nThe overall effect is that the Edit Video Page and the Create Video Page are easier to parse while filling them out.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/973-26.1 Clarifying the Video Edit Page.mp4.mp4", duration: 347, published_at: "2019-11-11 10:00:00", code_summary: nil, course_id: 25, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Previewing Videos wthe VideoWatch Component", description: "We create a VideoWatch Component that we can insert anywhere that will play our video in whatever space we give it.\n\nOur first use is for the video in the Watch page, and then we add in smaller versions in the Video Show and Video Edit pages in the admin interface.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/744-26.2 Previewing videos with the VideoWatch Component.mp4.mp4", duration: 468, published_at: "2019-11-11 11:00:00", code_summary: nil, course_id: 25, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Improving the Video Watch Page", description: "We make improvements to the Video Watch page, mostly around displaying our Markdown fields correctly.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/428-26.3 Improving the Watch Page.mp4.mp4", duration: 171, published_at: "2019-11-11 12:00:00", code_summary: nil, course_id: 25, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Reinstating isPlayed and markPlayed functions", description: "We used to be able to mark videos as played in our old Vue app, then see which of the videos we'd already seen.  This reimplements that functionality in our Nuxt app.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/332-26.4 Reinstating the isPlayed and markPlayed functionality.mp4.mp4", duration: 589, published_at: "2019-11-11 13:00:00", code_summary: nil, course_id: 25, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 2 - Dynamic Head and Foot Slots", description: "Your goal in this exercise is to generate dynamic head and foot slots from the columns array.\n\nHere's the starting code that goes within the VSTable Component:\n\n```\n<template #head.stargazers>\n  <font-awesome-icon icon=\"star\" />\n  <font-awesome-icon icon=\"star\" />\n  <font-awesome-icon icon=\"star\" />\n</template>\n<template #head.openIssues>\n  Here Be Dragons\n  <font-awesome-icon icon=\"dragon\" />\n</template>\n\n<template #foot.stargazers=\"{items}\">{{sumBy(items, 'stargazers_count')}}</template>\n<template #foot.openIssues=\"{items}\">{{sumBy(items, 'open_issues')}}</template>\n```", thumbnail: nil, videoUrl: nil, duration: 181, published_at: "2020-02-13 15:00:00", code_summary: nil, course_id: 33, order: "8.0", pro: true, lesson_type: "Exercise", code: nil, code_summary_state: "not_ready"},
  {name: "JSONAPI Relationships in Mirage", description: "In this video we expand our knowledge of MirageJS Models and Serializers in order to return relationships in JSONAPI.\n\n[Github: JSON API Relationships](https://github.com/jeffreybiles/vue-screencasts/commit/9b5744fdb08c75e977effb090c9bbd738827ae18)\n\n[Github: Full JSON Data so far](https://github.com/jeffreybiles/vue-screencasts/commit/d8e82a42f28cbccadc28beaf5fb499847c987a86)\n\nThis video creates the mock API for [this video](https://www.vuescreencasts.com/watch/14).", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/402-30.4 JSONAPI Relationships.mp4.mp4", duration: 139, published_at: "2019-11-30 13:00:00", code_summary: nil, course_id: 29, order: "2.75", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to the Building a VueJS App series", description: "In this series, we'll be building a VueJS site to watch screencasts -- actually, this very site you're on right now!\n\n[Original Youtube series](https://www.youtube.com/playlist?list=PLPwpWyfm6JADRf8x1Jc0Da8R71WJyt-Jn)\n\n[@VueScreencasts](https://twitter.com/VueScreencasts)", thumbnail: "https://vue-screencasts.s3.us-east-2.amazonaws.com/video-files/Series%3A+Building+a+VueJS+App/Thumbnails/Building+a+VueJS+app+part+1.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/635-0.1 Intro to the Building an App series.mp4.mp4", duration: 97, published_at: "2019-09-08 08:00:00", code_summary: "No code here, so just do a summary.", course_id: 1, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "ready"},
  {name: "Exploring the Starter Code", description: "Let's take a look at the code that's been generated for us from Vue-CLI.  Through that, we can get the lay of the land and learn a lot about how Vue works.", thumbnail: "https://vue-screencasts.s3.us-east-2.amazonaws.com/video-files/Series%3A+Building+a+VueJS+App/Thumbnails/Building+a+VueJS+app+part+1.png", videoUrl: "https://vue-screencasts.s3.us-east-2.amazonaws.com/video-files/Series%3A+Building+a+VueJS+App/1.2+-+Exploring+the+Starter+Code.mp4", duration: 747, published_at: "2019-09-08 10:00:00", code_summary: "package.json\n\n```\n{\n  \"name\": \"vue-screencasts\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\",\n    \"lint\": \"vue-cli-service lint\"\n  },\n  \"dependencies\": {\n    \"core-js\": \"^3.1.2\",\n    \"vue\": \"^2.6.10\",\n    \"vue-router\": \"^3.0.6\",\n    \"vuex\": \"^3.0.1\"\n  },\n  \"devDependencies\": {\n    \"@vue/cli-plugin-babel\": \"^4.0.0-rc.2\",\n    \"@vue/cli-plugin-eslint\": \"^4.0.0-rc.2\",\n    \"@vue/cli-plugin-router\": \"^4.0.0-rc.2\",\n    \"@vue/cli-plugin-vuex\": \"^4.0.0-rc.2\",\n    \"@vue/cli-service\": \"^4.0.0-rc.2\",\n    \"@vue/eslint-config-prettier\": \"^5.0.0\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"eslint\": \"^5.16.0\",\n    \"eslint-plugin-prettier\": \"^3.1.0\",\n    \"eslint-plugin-vue\": \"^5.0.0\",\n    \"prettier\": \"^1.18.2\",\n    \"sass\": \"^1.19.0\",\n    \"sass-loader\": \"^7.1.0\",\n    \"vue-template-compiler\": \"^2.6.10\"\n  },\n  \"eslintConfig\": {\n    \"root\": true,\n    \"env\": {\n      \"node\": true\n    },\n    \"extends\": [\n      \"plugin:vue/essential\",\n      \"@vue/prettier\"\n    ],\n    \"rules\": {},\n    \"parserOptions\": {\n      \"parser\": \"babel-eslint\"\n    }\n  },\n  \"postcss\": {\n    \"plugins\": {\n      \"autoprefixer\": {}\n    }\n  },\n  \"browserslist\": [\n    \"> 1%\",\n    \"last 2 versions\"\n  ]\n}\n```\n\nmain.js\n\n```\nimport Vue from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\nimport store from \"./store\";\n\nVue.config.productionTip = false;\n\nnew Vue({\n  router,\n  store,\n  render: h => h(App)\n}).$mount(\"#app\");\n```\n\nVuex store\n\n```\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {},\n  mutations: {},\n  actions: {},\n  modules: {}\n});\n```\n\nVue Router\n\n```\nimport Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport Home from \"../views/Home.vue\";\n\nVue.use(VueRouter);\n\nconst routes = [\n  {\n    path: \"/\",\n    name: \"home\",\n    component: Home\n  },\n  {\n    path: \"/about\",\n    name: \"about\",\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () =>\n      import(/* webpackChunkName: \"about\" */ \"../views/About.vue\")\n  }\n];\n\nconst router = new VueRouter({\n  routes\n});\n\nexport default router;\n```\n\nHome.vue\n\n```\n<template>\n  <div class=\"home\">\n    <img alt=\"Vue logo\" src=\"../assets/logo.png\" />\n    <HelloWorld msg=\"Welcome to Your Vue.js App\" />\n  </div>\n</template>\n\n<script>\n// @ is an alias to /src\nimport HelloWorld from \"@/components/HelloWorld.vue\";\nexport default {\n  name: \"home\",\n  components: {\n    HelloWorld\n  }\n};\n</script>\n```\n\nI don't think we need to include any of the other .vue files, because they'll just clutter stuff up , and we'll be editing them soon anyways.", course_id: 1, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "ready"},
  {name: "Getting a file from an input", description: "This lesson shows how we can use an \\<input\\> tag to let the user select a file from their filesystem directly.\n\nWe don't actually upload it yet, but we do take a look at the steps we'll need to undertake to do that, and the data we can get from the file input.\n\nBefore finishing the video, we create a reusable Component in which we can put our file upload code. ", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/025-27.1 Getting a file from an input.mp4.mp4", duration: 353, published_at: "2019-11-12 10:00:00", code_summary: nil, course_id: 26, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Setting up S3", description: "We go to the AWS dashboard, and I show how I configured an S3 bucket and an IAM User and Policy, how I connected them, and where I got the credentials for the app.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/292-27.2 Setting up S3.mp4.mp4", duration: 273, published_at: "2019-11-12 11:00:00", code_summary: nil, course_id: 26, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Installing font-awesome in Nuxt", description: "We install font-awesome in Nuxt so our played checkmark will work.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/297-26.5 Installing font-awesome in Nuxt.mp4.mp4", duration: 140, published_at: "2019-11-11 14:00:00", code_summary: nil, course_id: 25, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review", description: "A review of the changes we made in this chapter.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/520-26.6 Review.mp4.mp4", duration: 159, published_at: "2019-11-11 15:00:00", code_summary: nil, course_id: 25, order: "7.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Data Relationships in MirageJS", description: "We add tags, and define their relationship to videos through the hasMany method on the Model, and the include array on the Serializer.\n\n[Code on Github](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/ea64f21c3301144f468d917cd3d1d11d82e4d9c6)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/786-Mirage with Nuxt 4 - Relationships in Mirage.mp4.mp4", duration: 306, published_at: "2020-01-31 00:00:00", code_summary: nil, course_id: 31, order: "5.5", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Uploading Indicator", description: "We need a way to let our users know that the video is still uploading -- and thus that they shouldn't go to another page and interrupt the process.\n\nThis solution isn't as full-featured as a progress bar, but it's still extremely useful.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/225-27.5 Loading Indicator.mp4.mp4", duration: 204, published_at: "2019-11-12 14:00:00", code_summary: nil, course_id: 26, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Using Vuetify's v-file-input", description: "Vuetify's v-file-input won't change the functionality of our file upload, but it will make it look nicer.\n\nWhile we're thinking about the interface, we make a few more improvements to make the user experience better.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/850-27.6 Vuetify's v-file-input.mp4.mp4", duration: 415, published_at: "2019-11-12 15:00:00", code_summary: nil, course_id: 26, order: "7.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Review of Uploading Files to S3", description: "A review of everything we learned in this course.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/594-27.7 Review of Uploading to S3.mp4.mp4", duration: 322, published_at: "2019-11-12 16:00:00", code_summary: nil, course_id: 26, order: "8.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 3 - Max Rating", description: "Hint:\n\n```\n{\n    maxRating: Number, \n    default: 5\n}\n```", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/261-33.5-E - Exercise 3 Max Rating.mp4.mp4", duration: 36, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "6.0", pro: true, lesson_type: "Exercise", code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 2 - Rounded Ratings", description: "Hint: \n\n```\nMath.round(2 * this.rating)/2\n```", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/244-33.4-E - Exercise 2 Rounding.mp4.mp4", duration: 27, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "5.0", pro: true, lesson_type: "Exercise", code: nil, code_summary_state: "not_ready"},
  {name: "Review/Conclusion of Vuex Strict Mode", description: "A quick review of the journey we went through in this chapter.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/755-32.6 Conclusion.mp4.mp4", duration: 62, published_at: "2020-01-25 14:00:00", code_summary: nil, course_id: 30, order: "8.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Improving Vuex Action and Mutation Names", description: "A quick video on improving how we name our Vuex actions and mutations.  Less repeated information, more readable names, and ever-so-slightly shorter code!", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/075-31.3 Improving VueX Action and Mutation names.mp4.mp4", duration: 204, published_at: "2020-01-20 23:00:00", code_summary: nil, course_id: 28, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Answer to Exercise 2 - Dynamic Head and Foot Slots", description: "The Solution to Exercise 2", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/504-34.7 Answer to Exercise 2 - Dynamic Head and Foot Slots.mp4.mp4", duration: 245, published_at: "2020-02-13 15:00:00", code_summary: nil, course_id: 33, order: "9.0", pro: true, lesson_type: "Answer", code: nil, code_summary_state: "not_ready"},
  {name: "Vuetifying the Video List with Cards", description: "Vuetify Cards, along with flexbox styling, let us separate out our videos and display them nicely.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/371-Building a VueJS app part 3.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/111-3.4 Vuetifying the Video List with Cards.mp4.mp4", duration: 951, published_at: "2019-09-11 07:00:00", code_summary: "The tag page, wrapping around the VideoListVideo\n\n    <h1 class=\"display-3 ma-4 d-flex justify-center\">\n      Videos with Tag \"{{ tag.name }}\"\n    </h1>\n\n    <div class=\"d-flex flex-wrap\">\n      <div v-for=\"video in videosOnTag\" :key=\"video\">\n        <VideoListVideo :video=\"video\"></VideoListVideo>\n      </div>\n\nThe VideoListVideo Component's template\n\n    <v-card width=\"340px\" \n           hover \n           class=\"ma-2\"\n           :to=\"{ name: 'video-watch', params: { id: video.id }}\">\n      <v-img :src=\"video.thumbnail\" />\n      <v-card-title>{{ video.name }}</v-card-title>\n\n      <v-card-actions>\n        <span v-for=\"tag_id in video.tag_ids\" :key=\"`${video.id}-${tag_id}`\">\n          <v-btn color=\"green lighten-2\" \n                class=\"mr-2\"\n                small\n                @mousedown.stop\n                :to=\"{ name: 'tag', params: {id: tag_id}}\">\n            {{ getTag(tag_id).name }}\n          </v-btn>\n        </span>\n      </v-card-actions>\n    </v-card>", course_id: 4, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Finishing up MirageJS in our vanilla Vue app", description: "We go through the rest of our vanilla VueJS app, putting in the MirageJS endpoints that are needed.\n\n[Github: Finished branch with Mirage](https://github.com/jeffreybiles/vue-screencasts/tree/with-mirage-backend)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/820-30.7 Finishing Up.mp4.mp4", duration: 302, published_at: "2019-11-30 16:00:00", code_summary: nil, course_id: 29, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Authentication in MirageJS", description: "This video shows how we mock the API endpoints required for authentication using MirageJS.\n\n[Github: Users Index](https://github.com/jeffreybiles/vue-screencasts/commit/58b541aeb7641c765cc990a31e53735aaffb32a0)\n\n[Github: Returning User from /sessions](https://github.com/jeffreybiles/vue-screencasts/commit/34f6af4a9bb121d134c6841cf3374ca7a03dda5b)\n\n[Github: /sessions checks username and password](https://github.com/jeffreybiles/vue-screencasts/commit/18804d9f38e98e8214f4485d20ffef32e096b0ec)\n\n[Github: Register new user](https://github.com/jeffreybiles/vue-screencasts/commit/fa641fb9471e4c107a0c101ba390fcc458b61a80)\n\n[Github: Add admin property to users](https://github.com/jeffreybiles/vue-screencasts/commit/8e7b7dbea98e54a691802797ce59cc9f9e20d228)\n\nThis video covers all the MirageJS you'll need for [our VueJS authentication course](https://www.vuescreencasts.com/courses/9).", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/868-30.6 Authentication in Mirage.mp4.mp4", duration: 256, published_at: "2019-11-30 15:00:00", code_summary: nil, course_id: 29, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to Secure File Upload to S3 from VueJS", description: "We preview the functionality we're going to build, and see the steps we'll have to take to get there.\n\nThis course has been well received so far, and it seems to be secure _for our use case_.  If you'd like to increase your level of security even further, you can use [this pattern, as shown in the AWS docs](https://docs.aws.amazon.com/AmazonS3/latest/dev/PresignedUrlUploadObject.html).  [Check out the Reddit Discussion](https://www.reddit.com/r/vuejs/comments/dvmd8e/secure_file_upload_to_s3_directly_from_the/).", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/432-27.0 Intro to Direct File Uploads to S3.mp4.mp4", duration: 131, published_at: "2019-11-12 09:00:00", code_summary: nil, course_id: 26, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Adjusting Our Aim - Intro", description: "In the month and a half I've spent building the site, I've learned a couple things.  This chapter is all about applying those best practices now, and preparing for the next features by destroying one I've decided to cut.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/090-31.0 Intro to Adjusting Our Aim.mp4.mp4", duration: 61, published_at: "2020-01-19 11:00:00", code_summary: nil, course_id: 28, order: "0.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Nuxt + Mirage - From Install to first API Endpoint", description: "We start off with the simplest API call in our Nuxt app's history and try to get Mirage to match what the app expects.\n\nTo get stuff sent from the endpoint we'll need to install Mirage, put it in a plugin, and define a route with some mock data.\n\nThen to get it into the correct form we'll need to create a Model, add the data to our fixtures, pull the data from the schema, and then define our application's Serializer.\n\nIt sounds like a lot, but each step is pretty simple, and we show what the error state is between many of the steps so you can recognize them in your own app.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/206-Mirage with Nuxt - From Installation to First APE Endpoint.mp4.mp4", duration: 634, published_at: "2020-01-26 14:00:00", code_summary: nil, course_id: 31, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Mirage with Nuxt - a Warning about Universal Mode", description: "There might be a bug with Mirage and SSR.  \n\nThe bad news is that switching to SPA mode can lose some SEO and performance benefits.  The good news is that, unless you're wanting to put Mirage in your production app, the bad news doesn't apply to where it really matters.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/245-Mirage with Nuxt - A Warning About Universal Mode.mp4.mp4", duration: 113, published_at: "2020-01-26 15:00:00", code_summary: nil, course_id: 31, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Getting S3 credentials securely from API", description: "We learn how to get S3 credentials securely from the API, so our Admin users can upload files directly.\n\n_Note: this only works if you have a limited number of Admin users that you trust to inform you if their machines get stolen or compromised._\n\n_If you want regular users or less trusted Admins to upload files directly, check out [Amazon Cognito's Identity Pools/Federated Identities](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html)._", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/542-27.3 Getting S3 Credentials Securely from our API.mp4.mp4", duration: 175, published_at: "2019-11-12 12:00:00", code_summary: nil, course_id: 26, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Better Forms with the Changeset Pattern, Part 1", description: "This video introduces the new pattern we'll be using - copying the video, then changing that copy.\n\nAt the end we discover an issue that had been lurking in our code, but has just now been brought out by using Strict Mode.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/763-32.2 copy changeset pattern 1.mp4.mp4", duration: 241, published_at: "2020-01-21 13:00:00", code_summary: nil, course_id: 30, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "VSRating Component", description: "We go over the main example we'll be building off of during this course - the VSRating Component.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/365-33.2 - VSRating Component.mp4.mp4", duration: 178, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "1.5", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Connecting to a REST Server", description: "This tutorial shows how to connect to a REST server.  We use the mounted hook and asynchronous API calls in order to take that data and use it in our Vue Component.\n\n[VueJS Commit for connecting to REST Server](https://github.com/jeffreybiles/vue-screencasts/commit/f928cb81d88d9a19eccc4f582d039597dab57557)\n\n[Code for Rails API](https://github.com/jeffreybiles/vue-screencasts-server/tree/117d5a666d876650dafee8613c499f270fef3eb4)\n\n[Video MirageJS Mock API](https://www.vuescreencasts.com/watch/172)", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/046-Building a VueJS app part 2.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/914-2.1 - Putting Server Data into VueX.mp4.mp4", duration: 500, published_at: "2019-09-09 07:00:00", code_summary: "A video from the API looks like this:\n\n\n    {\n      \"id\": 1,\n      \"name\": \"ES2015 Arrow Functions\",\n      \"description\": \"In this episode, we cover two different ways that you can make your code clearer by removing the 'function' keyword.\\n\",\n      \"thumbnail\": \"https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/783-Screenshot 2019-11-09 21.02.24.png.png\",\n      \"videoUrl\": \"https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/40545481-1.1 - Vue-CLI.mp4.mp4\",\n      \"created_at\": \"2019-09-09T16:07:09.580Z\",\n      \"updated_at\": \"2019-11-17T03:36:49.706Z\"\n    }\n\nThat is the response from `/api/videos/1`.\n\n`/api/videos` returns an array of objects like that.\n\nWe process them using the following code:\n\n    import Api from '@/services/api'\n\n    export default {\n      mounted() {\n        this.loadVideos()\n      },\n      methods: {\n        async loadVideos(){\n          let response = await Api().get('/videos')\n          this.videos = response.data\n        }\n      },\n      data(){\n        return {\n          videos: []\n        }\n      }\n    }\n\nThe API service is defined as follows:\n\n    import axios from 'axios';\n\n    export default () => {\n      return axios.create({\n        baseURL: 'http://localhost:3000/api',\n        withCredentials: false,\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    }\n\nAnd to make it work, you must add axios:\n\n    yarn add axios", course_id: 2, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "What is Vuex Strict Mode?", description: "What is Vuex's Strict Mode, and why would we want to use it?\n\nI've gotten several comments asking how to make our example app work in Strict Mode, so in this course we're going to investigate how to do that.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/169-32.0 What is VueX Strict Mode.mp4.mp4", duration: 127, published_at: "2020-01-21 00:00:00", code_summary: nil, course_id: 30, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Using FontAwesome in VueJS", description: "We learn how to use [FontAwesome](https://fontawesome.com/), using the [vue-fontawesome library](https://github.com/FortAwesome/vue-fontawesome).\n\nWe install the library, get everything set up, and use our checkmark.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/212-Building a VueJS app part 4.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/887-4.3 - Using FontAwesome.mp4.mp4", duration: 172, published_at: "2019-09-13 14:00:00", code_summary: "Add the following dependencies to your `package.json`:\n\n    \"@fortawesome/fontawesome-svg-core\": \"^1.2.22\",\n    \"@fortawesome/free-solid-svg-icons\": \"^5.10.2\",\n    \"@fortawesome/vue-fontawesome\": \"^0.1.7\",\n\nIn `src/main.js`, add the following lines to register the font-awesome component and icons:\n\n    import { library } from '@fortawesome/fontawesome-svg-core'\n    import { faCheck } from '@fortawesome/free-solid-svg-icons'\n    import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\n\n    library.add(faCheck)\n\n    Vue.component('font-awesome-icon', FontAwesomeIcon)\n\n    // ... \n    // creating the Vue instance\n\nThen we can use the checkmark in our template:\n\n    <font-awesome-icon icon=\"check\" />", course_id: 5, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Refactoring to a VideoEditForm Component", description: "We want to be able to use our form and validations in multiple places - specifically, the video creation page and video edit page.  Otherwise, we'd have to replicate our increasingly-complex fields between two different pages, along with the code for validating the form.\n\nThe abstraction we'll use to solve this problem is a Vue Component.  We can remove most of the repetition, and pass in props for the parts of the forms that differ.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/837-7.3 Refactoring to a VideoEditForm Component.mp4.mp4", duration: 396, published_at: "2019-09-20 11:00:00", code_summary: "The code changes can be found in [this git commit](https://github.com/jeffreybiles/vue-screencasts/commit/7f47778e47626c3188d96bec4f9645f5adbf416f).", course_id: 8, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Completely Customizable Dynamic Tables", description: "We complete the process of making our tables dynamic.\n\nWe demonstrate this by adding a column to our existing table -- with just one line! -- and then using VSTable for a completely different dataset.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/879-34.8 Completely Customizable Dynamic Tables.mp4.mp4", duration: 245, published_at: "2020-02-13 15:00:00", code_summary: nil, course_id: 33, order: "10.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Removing Tags", description: "We're replacing the Tags feature with the Courses feature.  This video deletes the tags, and the next chapter starts the process of adding courses.\n\nAlthough the code may be deleted, everything we've learned will stay with us - helping us create new features even faster than before.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/593-31.2 Removing Tags.mp4.mp4", duration: 409, published_at: "2020-01-20 13:00:00", code_summary: nil, course_id: 28, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Preview new features (VueScreencasts.com launch)", description: "After a long wait, the VueScreencasts.com website is finally here.  Let's take a tour of the new features you can use - and the features we're going to be building in this series.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/415-Launching VueScreencasts.com.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/268-31 Preview of VueScreencasts.mp4.mp4", duration: 1198, published_at: nil, code_summary: nil, course_id: 28, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "More Data Relationships in Mirage", description: "We go through a lot trying to get the tag page to work correctly.\n\n* [Code: get tags showing up correctly](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/3e228241e5b789232eac7635cbd7f7930d610719)\n* [Code: filter videos correctly](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/0ed0a36a2b13d297857227da96c31f46b140bf00)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/406-Mirage with Nuxt 5 - More Relationships in Mirage.mp4.mp4", duration: 573, published_at: "2020-01-31 00:00:00", code_summary: nil, course_id: 31, order: "6.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Introducing: MicroCasts, from VueScreencasts", description: "Microcasts are little videos about all the things that don't fit in a course.\n\nSmall libraries introduced, questions answered, features announced, and more!\n\nSend me your questions and comments:\n\n* jeffrey@vuescreencast.com\n* https://twitter.com/VueScreencasts\n* 501-256-3078", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/110-MicroCast 1 - Introducing MicroCasts.mp4.mp4", duration: 128, published_at: nil, code_summary: nil, course_id: 34, order: "1.0", pro: nil, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "The Create Video Form", description: "Let's take what we learned in the previous video and use it to build a complete -- and better-styled -- form for creating videos.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/124-5.2 - The 'Create Video' Form.mp4.mp4", duration: 464, published_at: "2019-09-16 11:00:00", code_summary: "The form:\n\n    <v-row>\n      <v-col md=\"3\" cols=\"12\">\n        <h1>Video Create Page</h1>\n        <div class=\"field\">\n          <label for=\"name\">Name</label>\n          <input type=\"text\" id=\"name\" v-model=\"video.name\" />\n        </div>\n        <div class=\"field\">\n          <label for=\"description\">Description</label>\n          <input type=\"text\" id=\"description\" v-model=\"video.description\" />\n        </div>\n        <div class=\"field\">\n          <label for=\"thumbnail\">Thumbnail URL</label>\n          <input type=\"text\" id=\"thumbnail\" v-model=\"video.thumbnail\" />\n        </div>\n        <div class=\"field\">\n          <label for=\"videoUrl\">Video URL</label>\n          <input type=\"text\" id=\"videoUrl\" v-model=\"video.videoUrl\" />\n        </div>\n        <v-btn>Create Video</v-btn>\n      </v-col>\n      <v-col md=\"9\" cols=\"12\">\n        <VideoListVideo :video=\"video\" />\n      </v-col>\n    </v-row>\n\nThe SCSS\n\n    .field {\n      input {\n        border: 1px solid black;\n      }\n      label {\n        display: block;\n      }\n      padding-bottom: 10px;\n    }\n\nThe script:\n\n    import VideoListVideo from '@/components/VideoListVideo';\n    export default {\n      data() {\n        return {\n          video: {}\n        }\n      },\n      components: {\n        VideoListVideo,\n      },\n    }", course_id: 6, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Creating a new record, saving it to the Server", description: "The whole point of having user input forms is so we can save that data to the server, and in this lesson we learn how to make that happen.\n\nIn addition to reviewing what we've learned about event handling and Vuex, we also learn how to redirect to a different page using the Vue Router.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/473-5.3 - Persisting a new record to the Server.mp4.mp4", duration: 414, published_at: "2019-09-16 14:00:00", code_summary: "The chain of events starts with the click event\n\n    <v-btn @click=\"createVideo\">Create Video</v-btn>\n\nThat triggers the `createVideo` method on the component, which dispatches to an action on the store.  When the action returns, it will redirect the browser to the video-watch page of the new video.\n\n    async createVideo() {\n      let video = await this.$store.dispatch('createVideo', this.video);\n      this.$router.push({ name: 'video-watch', params: {id: video.id}});\n    }\n\nThe `createVideo` action on VueX  calls to the server, and gets back a response.  The video in that response is like the data sent by the form, except it now has an ID.\n\nIt commits a mutation with those results, then returns them so that the component's method can use the video to redirect the browser.\n\n    async createVideo({commit}, video) {\n      let response = await Api().post('/videos', video);\n      let savedVideo = response.data.data.attributes;\n      commit('ADD_VIDEO', savedVideo);\n      return savedVideo;\n    }\n\nFinally, this is the mutation that gets called:\n\n    ADD_VIDEO(state, video) {\n      let videos = state.videos.concat(video);\n      state.videos = videos;\n    }", course_id: 6, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Saving Played status to localstorage", description: "In this lesson we learn how to mark a video as played, triggering a Vuex action when a button is pressed, then modifying localstorage and the store's state.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/513-Building a VueJS app part 4.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/713-4.2 - Saving Played status to localstorage.mp4.mp4", duration: 228, published_at: "2019-09-13 11:00:00", code_summary: "The core of this video is the following mutation:\n\n    MARK_VIDEO_PLAYED = (state, videoId) {\n      let playedVideos = state.playedVideos.concat(videoId);\n      state.playedVideos = playedVideos;\n      window.localStorage.playedVideos = JSON.stringify(playedVideos);\n    }\n\nWe're setting the updated array to both the store's state and localStorage separately, because aside from the initial load, the two are not directly connected.  Note that we have to stringify the `playedVideos` array before sending it to localstorage.\n\nWe also created the following action:\n\n    markPlayed({commit}, videoId) {\n      commit('MARK_VIDEO_PLAYED', videoId);\n    }\n\nAnd the following method:\n\n    markPlayed(){\n      this.$store.dispatch('markPlayed', this.video.id)\n    }\n\nAnd added a click event handler to the Mark Played button\n\n    <div class=\"green--text\" v-if=\"isPlayed\">Played</div>\n    <div v-else><v-btn x-small v-on:click=\"markPlayed\">Mark Played</v-btn></div>", course_id: 5, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Saving Video Plays", description: "We change the \"Mark Played\" button so it saves video plays to the server rather than localstorage.\n\nBecause of the excellent separation of concerns given by Vuex, the vast majority of our code written in this lesson is in the Vuex store.  In fact, the only lines outside the Vuex store we need to write are about whether or not to show the \"Mark Played\" button, since users that aren't logged in can no longer track played videos.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/329-11.2 Saving Video Plays.mp4.mp4", duration: 464, published_at: "2019-09-30 10:00:00", code_summary: nil, course_id: 11, order: "3.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "What you'll need to learn NuxtJS", description: "This course is going to dig into Nuxt, going far beyond just a basic install and Hello World.\n\nIn order to get the most out of this course, you should have an understanding of the VueJS basics.  For video 8, it'll help to understand Vuex as well.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/863-16.0 Intro to Nuxt.mp4.mp4", duration: 150, published_at: "2019-10-14 08:00:00", code_summary: nil, course_id: 15, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Nested Slots", description: "Our goal in this video is to put a second pagination bar below the table... without copy/pasting 30+ lines of code!\n\nWe do this through Nested Slots - having a top-level slot that goes down several levels in the Component Tree.  \n\nThis technique is similar to prop-drilling, in that it has a distinct downside, but is still the correct choice in many cases.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/892-37.3 Nested Slots.mp4.mp4", duration: 645, published_at: "2020-03-05 11:00:00", code_summary: nil, course_id: 37, order: "3.5", pro: true, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Query Params - Saving Page Number", description: "Query Params are a great way to save and share the state of the app, using the URL.\n\nIn this lesson, we're adding the pageNumber Query Param to the Pagination component, learning how to use `$route.query` and `$router.push` to find and change the query params.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/111-36.5 Query Params - Saving Page Number.mp4.mp4", duration: 321, published_at: "2020-02-27 17:00:00", code_summary: nil, course_id: 36, order: "6.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Fixing Data Discrepancies between server and Mirage", description: "When the data from your server is formatted differently from the data coming from Mirage, you have three options:\n\n1. Change the Server\n2. Change Mirage\n3. Change your Vue code\n\nOftentimes changing the server to better match JSON API is the best option, but in this course we're going to stick with the other two methods.\n\nThis video grapples with the fact that our server puts an ID in the video attributes, while the official JSON API spec -- and our Mirage setup -- does not.\n\nThe code for this video can be found on github: [data munging](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/167f61dce3b9882f65d2044b07a2fe779b40a415), [adding video route](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/9a770e1697e74db3580739992b6eff2c31217bee).", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/215-Mirage with Nuxt 3 - Fixing Data Discrepancies.mp4.mp4", duration: 356, published_at: "2020-01-31 00:00:00", code_summary: nil, course_id: 31, order: "4.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Why use Vuex in Nuxt?", description: "We're going to use Vuex because it can make our code more efficient - both in how many lines of code we we have write, and how many API calls our app has to make.\n\n__Previous courses__\n\n[Intro to Nuxt](https://www.vuescreencasts.com/courses/15)\n\n[Real World Nuxt](https://www.vuescreencasts.com/courses/16)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/730-18.0 Why use VueX in Nuxt.mp4.mp4", duration: 117, published_at: "2019-10-20 08:00:00", code_summary: nil, course_id: 17, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Data Relationships with JSON API and Vuex", description: "Getting data relationships from an API can seem difficult at first... but thanks to JSON API's consistent format, we're able to load our videos and tags, and their relationships, with ease.\n\nIn this lesson, we learn how to do some basic munging on incoming data, so it's easier to use within our app, and then attach the tags to the videos and display them as nice green buttons.\n\n\n[Ruby on Rails code](https://github.com/jeffreybiles/vue-screencasts-server/commit/259cb61df3cbd6c64948fffdc1e337c9ca6c68ee)\n\n[Github: loading JSONAPI relationship](https://github.com/jeffreybiles/vue-screencasts/commit/9b5744fdb08c75e977effb090c9bbd738827ae18) (note: this one has some MirageJS mixed in, ignore that if you're not going that path.\n\n[Github: showing tags on videos](https://github.com/jeffreybiles/vue-screencasts/commit/23692c32a9f35f62e9cc5807222bfecb5e3440d8)\n\n[MirageJS Video](https://www.vuescreencasts.com/watch/174)", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/069-Building a VueJS app part 2.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/052-2.4 - JSON API Relationships.mp4.mp4", duration: 1151, published_at: "2019-09-09 07:00:00", code_summary: nil, course_id: 2, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Displaying Played status from LocalStorage", description: "In this lesson we learn how to take data that's in LocalStorage and load it into the Vuex state, then use it in our VueJS application.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/005-Building a VueJS app part 4.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/149-4.1 - Displaying Played status from LocalStorage.mp4.mp4", duration: 396, published_at: "2019-09-13 09:00:00", code_summary: "Add `playedVideos` to your state.\n\n    playedVideos: []\n\nCreate a new mutation:\n\n    SET_PLAYED_VIDEOS(state, playedVideos) {\n      state.playedVideos = playedVideos;\n    },\n\nEdit the `loadVideos` action, adding the following two lines to the end:\n\n    let playedVideos = JSON.parse(window.localStorage.playedVideos);\n    commit('SET_PLAYED_VIDEOS', playedVideos);\n\n\nWe have to use JSON.parse, since localstorage only stores stringified values.\n\nIn your VideoWatch component, add a mapState for the relevant states, then create a computed property for whether a video has been played.\n\n    isPlayed(){\n      return this.playedVideos.includes(this.video.id);\n    }\n\nThen in the template of that component, add a conditional statement\n\n    <div class=\"green--text\" v-if=\"isPlayed\">Played</div>\n    <div v-else><v-btn x-small>Mark Played</v-btn></div>", course_id: 5, order: "2.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Intro to Vuex and the Server", description: "We look at what we'll be doing in the course, and go over the three options for the API.\n\n__Options for the API__\n\nThere are several options if you want to follow along.\n\nFirst, you could use MirageJS as a mock backend.  [Here's the course where I explain how to use it](https://www.vuescreencasts.com/courses/29), and [here's the github branch](https://github.com/jeffreybiles/vue-screencasts/tree/with-mirage-backend).  I'll be linking to specific videos and github commits from the relevant videos in this course.  This is probably the easiest way to follow along, but the downside is that data doesn't actually persist... this is a temporary solution to help you learn, not something you'll want to put into production.\n\nSecond, you could download the Ruby on Rails app I've created.  [Here's the app](https://github.com/jeffreybiles/vue-screencasts-server).  The relevant github commits will be linked in the video where they're needed.  I plan on creating a \"how to get a Ruby on Rails app running\" video sometime, but for now, only use this option if you're able to install and run a Rails app.\n\nThird, you could create your own API with the backend web framework of your choice.  Apparently that's Laravel and Node for most of you.  I don't plan on offering courses in those right now, but I may do that eventually if demand is high enough.\n\nFinally, you could just watch without creating the app yourself.  You'll probably learn less, but it's an option.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/366-2.0 Intro.mp4.mp4", duration: 241, published_at: "2019-12-18 08:00:00", code_summary: nil, course_id: 2, order: "1.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 1 Solution", description: "The solution to Exercise 1.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/972-35.2 Exercise 1 Answer.mp4.mp4", duration: 67, published_at: "2020-02-20 17:00:00", code_summary: nil, course_id: 35, order: "4.0", pro: true, lesson_type: "Answer", code: nil, code_summary_state: "not_ready"},
  {name: "Multiple Query Params", description: "We start by adding a queryParam in order to keep track of which organization we're using...\n\nThen we figure out how to preserve the queryParams that aren't supposed to change when working with multiple of them.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/885-36.6 Multiple Query Params.mp4.mp4", duration: 384, published_at: "2020-02-27 17:00:00", code_summary: nil, course_id: 36, order: "7.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Loading Data Once with Middleware - working with Mirage and SPA Mode", description: "We've now rearranged our Vuex patterns so we're making API calls through middleware.  However, there are some discrepancies between Universal Mode and SPA Mode that we need to fix.\n\n* [Code: load data with middleware](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/be8f92d13d3d171e469477748c9e3926e5fcc698)\n* [Code: only make API calls once](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/c7184413c0f366f418511e79259d93b11e58f399)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/245-Mirage with Nuxt 6 - Loading Data Once with Middleware.mp4.mp4", duration: 352, published_at: "2020-01-31 00:00:00", code_summary: nil, course_id: 31, order: "7.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "The Basic DataLoader Component", description: "This basic DataLoader Component takes our current functionality and abstracts it, saving us boilerplate code and thus reducing code clutter, time spent, and avoidable bugs.\n\nMost of the rest of the course will be adding new functionality.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/953-35.1 The Basic DataLoader Component.mp4.mp4", duration: 540, published_at: "2020-02-20 17:00:00", code_summary: nil, course_id: 35, order: "2.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 1 - Custom Authentication", description: "Your goal:\n\nMake it so the DataLoader Component can take in an authToken and use it in the Authorization header.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/587-35.2 Exercise 1 - Custom Authentication.mp4.mp4", duration: 42, published_at: "2020-02-20 17:00:00", code_summary: nil, course_id: 35, order: "3.0", pro: true, lesson_type: "Exercise", code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 2 - Spinner Plus", description: "Your goal:\n\nCreate a new slot, #loading-message, that will show a custom message while still showing the default spinner.\n\nThere are at least two valid ways to accomplish this, and we'll compare two of them in the solution video.  You only need to find one.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/420-35.5 Exercise 2 - Spinner Plus.mp4.mp4", duration: 97, published_at: "2020-02-20 17:00:00", code_summary: nil, course_id: 35, order: "7.0", pro: true, lesson_type: "Exercise", code: nil, code_summary_state: "not_ready"},
  {name: "The Error State", description: "When there's a problem with the API call, we want to let the user know.\n\nWe equip the DataLoader Component with a default error message, and provide a named slot if the developer wants to add a custom message.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/103-35.6 The Error State.mp4.mp4", duration: 221, published_at: "2020-02-20 17:00:00", code_summary: nil, course_id: 35, order: "9.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "DataLoader Component Conclusion", description: "We're done creating our DataLoader Component!\n\nWe've built something that can save a lot of code and provide some nice defaults for the error and loading states, while letting the developer customize the parts they want.\n\nEven more importantly, we've seen a way that data can flow, determining the state of the component and then being outputted for custom display.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/110-35.7 Conclusion.mp4.mp4", duration: 70, published_at: "2020-02-20 17:00:00", code_summary: nil, course_id: 35, order: "10.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Why Build a DataLoader Component?", description: "In this course we'll be using advanced Components and Slots knowledge to build the DataLoader Component.\n\n\nThe DataLoader Component itself is really cool and useful, but it does occupy a similar range of use-cases as the Suspense Component that's coming in Vue 3.\n\nSo why build it?\n\nThe two components do have slightly different use cases, and this component does have some debouncing and error handling functionality that I don't think Suspense possesses, but the biggest reason doesn't have to do with the component itself.\n\nTaking this course will enhance you thinking and help you add new tactics to your mental toolkit - tactics that you can use while building components that have nothing to do with loading data.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/851-35.0 Why Build a DataLoader Component.mp4.mp4", duration: 161, published_at: "2020-02-20 17:00:00", code_summary: nil, course_id: 35, order: "1.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Changing # of Results Per Page", description: "In this lesson, we're going to use everything we've learned in this course so far and use it to add a new feature.\n\nThe new feature is changing the number of results that display per page.\n\nWe'll be creating another row of buttons, adding a new queryParam, and feeding yet another piece of customized data to our endpoint.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/008-36.7 Results Per Page.mp4.mp4", duration: 523, published_at: "2020-02-27 17:00:00", code_summary: nil, course_id: 36, order: "8.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Active and Disabled States - Styling and Guardrails to Help the User", description: "Our users need a way to know which page they're on, so we're going to add an active class to help them keep track.\n\nIt's also useful to not let them click to a page that doesn't exist, so we're going to disable the next and previous buttons when appropriate.\n\nThese are small changes that give a massive increase in usability.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/495-36.4 Active and Disabled States - Styling and Guardrails to Help the User.mp4.mp4", duration: 223, published_at: "2020-02-27 17:00:00", code_summary: nil, course_id: 36, order: "5.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Nuxt Auth: Why does loginWith call both ‘login' and ‘user' endpoints? (Source dive)", description: "One of the most common questions I've gotten on [the Nuxt Auth course](https://www.vuescreencasts.com/courses/19) is about why the loginWith method calls both the 'login' and 'user' API endpoints.\n\nTo answer this question, we're going to be doing a source dive into the Nuxt Auth codebase.\n\nWe'll also talk about options for what you can do if you need to work with a suboptimal API.", thumbnail: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/thumbnails/956-MicroCast.png.png", videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/916-MicroCast 2 Nuxt Auth Why does loginWith call both login and user endpoints.mp4.mp4", duration: 371, published_at: nil, code_summary: nil, course_id: 34, order: "2.0", pro: nil, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "MirageJS Endpoints for Nuxt Auth", description: "In order to get Nuxt Auth to work with Mirage, we need to define three endpoints: \n* POST sessions, \n* POST users, and \n* GET sessions/user. \n\nThe thing that sets these endpoints apart from others is how they interact with the auth token - we create it in one,  read it from a header in another, and return it in the last.\n\n[Github Code](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/c831d77ecaead9563c5a8a696e3a74031a7421da)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/233-Mirage with Nuxt 8 - Nuxt Auth.mp4.mp4", duration: 836, published_at: "2020-01-31 00:00:00", code_summary: nil, course_id: 31, order: "9.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "The Loading State", description: "We implement a loading state, to let the user know that their request is being handled.\n\nBy default it will show a nice loading animation, but through named slots the developer can customize what the user sees.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/633-35.4 The Loading State.mp4.mp4", duration: 209, published_at: "2020-02-20 17:00:00", code_summary: nil, course_id: 35, order: "6.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 2 Solution", description: "A comparison of two possible solutions to Exercise 2. ", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/412-35.5 Exercise 2 Answer.mp4.mp4", duration: 86, published_at: "2020-02-20 17:00:00", code_summary: nil, course_id: 35, order: "8.0", pro: true, lesson_type: "Answer", code: nil, code_summary_state: "not_ready"},
  {name: "Debouncing API Calls (updated)", description: "By using debouncing techniques, we can reduce the number of API calls - resulting in less network load and a more performant app.\n\nIf anyone has leads on how to make the debouncing wait time customizable, please let me know: jeffrey@vuescreencasts.com for email, @vuescreencasts on twitter.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/654-35.3 Updated Debouncing API Calls.mp4.mp4", duration: 312, published_at: "2020-02-22 22:00:00", code_summary: nil, course_id: 35, order: "5.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Intro and Preview of Pagination Component Customization", description: "Github starter code: https://github.com/jeffreybiles/advanced-components-slots/tree/slots-4-start", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/176-37.0 Intro and Preview.mp4.mp4", duration: 137, published_at: "2020-03-05 11:00:00", code_summary: nil, course_id: 37, order: "1.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Using Pagination with Preloaded Data", description: "Up to now, this course has focused on using the Pagination Component to present a nice UI and spit out two numbers -- pageNumber and itemsPerPage.\n\nThis lesson shows how just a few lines of code will let the component take in a list of preloaded items and give back a paginated segment of that list.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/767-36.8 Applying Pagination to Preloaded Data.mp4.mp4", duration: 347, published_at: "2020-02-27 17:00:00", code_summary: nil, course_id: 36, order: "9.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "The Video Show Page (Vuex + Router Links)", description: "We create the Video Show Page.  Along the way, we extract our data to Vuex, create dynamic routes, then use Vue Router to link to those dynamic routes.", thumbnail: "https://vue-screencasts.s3.us-east-2.amazonaws.com/video-files/Series%3A+Building+a+VueJS+App/Thumbnails/Building+a+VueJS+app+part+1.png", videoUrl: "https://vue-screencasts.s3.us-east-2.amazonaws.com/video-files/Series%3A+Building+a+VueJS+App/1.4+-+The+Video+Watch+Page+(VueX+%2B+Router+Links).mp4", duration: 829, published_at: "2019-09-08 12:00:00", code_summary: "New route in router:\n\n```\n//...\nimport VideoWatch from \"../views/VideoWatch.vue\";\n\nconst routes = [\n  //...\n  {\n    path: \"/video/:id\",\n    name: \"video-watch\",\n    component: VideoWatch,\n    params: true\n  }\n]\n```\n\nAccessing a route param:\n\n```\n<template>\n  <div>\n    <h1>Hi, let's watch a video!</h1>\n    <h3>{{this.$route.params.id}}</h3>\n  </div>\n</template>\n```\n\nPutting videos in the Vuex store:\n\n```\nexport default new Vuex.Store({\n  state: {},\n  state: {\n    videos: [ \n      // same stuff copy-pasted from home page\n    ]\n  }\n  //...\n}\n```\nAccessing it on the home page:\n\n```\ndata(){\n  return {\n    videos: this.$store.state.videos\n  }\n}\n```\n\nComputed property to find current video on VideoWatch:\n\n```\nexport default {\n  computed: {\n    video(){\n      return this.$store.state.videos.find(vid => vid.id == this.$route.params.id)\n    }\n  }\n}\n```\n\nWe'll be adding ids in the video, but no need to re-type the videos array.\n\nFinal video display code:\n\n```\n<template>\n  <div>\n    <img :src=\"video.thumbnail\" alt=\"\">\n    <h1>{{video.name}}</h1>\n    <div v-html=\"video.description\"></div>\n  </div>\n</template>\n\n<style scoped>\n  img {\n    max-width: 50%;\n  }\n</style> \n```\n\nRouter-link tag to take user to video-watch page\n\n```\n<router-link :to=\"{ name: 'video-watch', params: { id: video.id }}\">\n\n</router-link>\n```\n\nThere's also an easier way I found later:\n\n```\n<router-link :to=\"`video/${video.id}`\">\n\n</router-link>\n```", course_id: 1, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "ready"},
  {name: "Mocking S3 Uploads with Mirage", description: "We need to mock an external API endpoint for this video.  We do that by sticking it before the namespace and urlPrefix assignments.\n\n[Github Code](https://github.com/jeffreybiles/vue-screencasts-nuxt/commit/cfeb1a2aa39cfefa3eca319310098260534e6f4c)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/665-Mirage with Nuxt 11 - S3 Uploads with Mirage.mp4.mp4", duration: 248, published_at: "2020-01-31 00:00:00", code_summary: nil, course_id: 31, order: "11.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Mirage + Nuxt Conclusion (for now)", description: "I'll continue to update this course as needed to keep up with the Building VueScreencasts.com megacourse.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/372-Mirage with Nuxt 13 - Conclusion For Now.mp4.mp4", duration: 70, published_at: "2020-01-31 00:00:00", code_summary: nil, course_id: 31, order: "13.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Fixing Two Mutation Bugs", description: "Thanks to implementing our new Changeset pattern, we discovered a pair of related bugs that had been lurking in our code.\n\nThe first was a mutation that had been essentially noop-ing.  Then, once we fix that, we have to deal with the code that handles the result... code which had never actually been put through the paces.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/076-32.3 fixing bugs.mp4.mp4", duration: 357, published_at: "2020-01-24 13:00:00", code_summary: nil, course_id: 30, order: "5.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Introduction - Why Active Learning, and how to set up for the exercises (setting up is easy)", description: "This is a new type of course - one that's designed to not just show you cool stuff, but to maximize your learning.\n\nThere will be exercises, so [clone the Github Repo](https://github.com/jeffreybiles/advanced-components-slots/tree/course-1-start).\n\n```\n$ git clone https://github.com/jeffreybiles/advanced-components-slots.git\n$ cd advanced-components-slots\n$ yarn install\n$ yarn serve\n```", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/576-33.0 - Intro to Advanced Components with Slots.mp4.mp4", duration: 155, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "1.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 1 - Half-filled Slot", description: "Be sure to get the code from [the Github Repo](https://github.com/jeffreybiles/advanced-components-slots/tree/7a820e4f5b1a91658dbb0c5900ce2bffd5117ce1).\n\nHints are below.  Read at your own risk.\n\nHint 1: \n```\n<template #half-filled>\n  <font-awesome-icon icon=\"adjust\" />\n</template>`\n```\n\nHint 2:\n\n```\nv-else-if=\"rating - index == 0.5\"\n```", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/954-33.4-E - Exercise 1 Half-filled slot.mp4.mp4", duration: 119, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "3.0", pro: true, lesson_type: "Exercise", code: nil, code_summary_state: "not_ready"},
  {name: "Conclusion", description: "Concluding this course, and previewing what to look forward to in the next course.\n\nHere's the comparison of our code when we started and our code at the end: https://github.com/jeffreybiles/advanced-components-slots/compare/pagination-start...pagination?expand=1", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/152-36.9 Conclusion.mp4.mp4", duration: 96, published_at: "2020-02-27 17:00:00", code_summary: nil, course_id: 36, order: "10.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Scoped Slots and Slot Props", description: "This feature lets our slots use information that's in our component.\n\nVery useful!\n\nAlthough we are using it as an 'alternative' technique to named props for this one situation, it is very common to use both together, and in Slots II and later courses we will do that.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/972-33.6 - Scoped Slots and slot props.mp4.mp4", duration: 309, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "7.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "The per-page-button Slot", description: "The simplest case we'll be dealing with in this course is the button that determines how many items to show per page.\n\nWe create a per-page-button slot, and then use it to customize that button.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/495-37.1 The per-page-button Slot.mp4.mp4", duration: 390, published_at: "2020-03-05 11:00:00", code_summary: nil, course_id: 37, order: "2.0", pro: true, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 5 Answer", description: "Answer to Exercise 5", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/222-33.8-A - Exercise 5 Answer.mp4.mp4", duration: 28, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "10.0", pro: true, lesson_type: "Answer", code: nil, code_summary_state: "not_ready"},
  {name: "Intro + Preview for the Pagination Component", description: "This video covers what we'll be building, who this course is for, and how to get started - whether this is your first course here, or you've been following along with this series.\n\nIf you've been following along, make sure to check out the [updated GitHub Auth](https://www.vuescreencasts.com/watch/264) and the [updated debouncing function](https://www.vuescreencasts.com/watch/279).\n\nFor newcomers, start with [the pagination-start branch on the Github repo](https://github.com/jeffreybiles/advanced-components-slots/tree/pagination-start).", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/857-36.0 Introduction.mp4.mp4", duration: 179, published_at: "2020-02-27 17:00:00", code_summary: nil, course_id: 36, order: "1.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Comparing Solutions", description: "Which of our two solutions are better?\n\nThe Scoped Slots solution is much shorter, while the Named Slots solution is a bit more clear and has less repetition.\n\nImportant to remember: although these two solutions use different techniques, the techniques are not either/or - they are often used together, and in Slots II and beyond we will usually be using both.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/288-33.9 - Comparing Solutions.mp4.mp4", duration: 200, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "11.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "The Let Component", description: "The Let Component is a great way to define properties in the template - perfect for using within a for loop.\n\nIt's also a great demonstration of scoped slots.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/557-33.9 - Let Component.mp4.mp4", duration: 208, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "12.0", pro: true, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 3 Answer", description: "Answer to Exercise 3", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/232-33.5-A - Exercise 3 Max Rating Answer.mp4.mp4", duration: 33, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "6.5", pro: true, lesson_type: "Answer", code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 4 Answer", description: "Answer to exercise 4", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/549-33.7-A - Exercise 4 Answer.mp4.mp4", duration: 87, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "8.5", pro: true, lesson_type: "Answer", code: nil, code_summary_state: "not_ready"},
  {name: "Vuex Strict Mode - Making the SnackBar Work", description: "Vuetify's Snackbar Component triggers an error in Vuex's Strict Mode when it closes.\n\nBecause this is a third-party Component, there are some interesting wrinkles. Our first solution looks like it works, but then causes a surprising bug later in the code. We dig into Vuetify's source code to find why we get the surprising behavior, and then we're able to create a better solution.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/380-32.4 Snackbar.mp4.mp4", duration: 240, published_at: "2020-01-30 08:00:00", code_summary: nil, course_id: 30, order: "6.5", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 6 - Double Let", description: "There are two possible solutions, and I'll show you both in the answer.  Go ahead and go to the next video once you've found one of the solutions.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/692-33.11 - Double Let.mp4.mp4", duration: 29, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "13.0", pro: true, lesson_type: "Exercise", code: nil, code_summary_state: "not_ready"},
  {name: "Exercise 6 Answer", description: "Solution to exercise 6", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/533-33.11 - Solution.mp4.mp4", duration: 111, published_at: "2020-02-07 05:00:00", code_summary: nil, course_id: 32, order: "14.0", pro: true, lesson_type: "Answer", code: nil, code_summary_state: "not_ready"},
  {name: "Turn Off Vuex Strict Mode in Production", description: "Be sure to do this very important step!\n\nWe also show you how to test that it's turned off in production, without pushing purposefully invalid code to your server.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/272-32.7 Turn Off VueX Strict Mode in Production.mp4.mp4", duration: 145, published_at: "2020-01-25 13:00:00", code_summary: nil, course_id: 30, order: "7.0", pro: nil, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "The pagination-button Slot", description: "The pagination-button slot will customize three different variations of the pagination button: one for the numbered buttons, and one each for the next and previous buttons.\n\nThis is slightly more complex than the example in the previous video.", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/379-37.2 The pagination-button Slot.mp4.mp4", duration: 607, published_at: "2020-03-05 11:00:00", code_summary: nil, course_id: 37, order: "3.0", pro: true, lesson_type: nil, code: nil, code_summary_state: "not_ready"},
  {name: "Pagination Bar Mockup", description: "We're going to start by creating a basic mockup of a Pagination Bar.\n\nIn the next video, we're going to hydrate it with data from the GitHub API.\n\n[Here's the GitHub Repo](https://github.com/jeffreybiles/advanced-components-slots/tree/pagination-start)", thumbnail: nil, videoUrl: "https://vue-screencasts-uploads.s3-us-west-2.amazonaws.com/videos/067-36.1 Pagination Bar Mockup.mp4.mp4", duration: 338, published_at: "2020-02-27 17:00:00", code_summary: nil, course_id: 36, order: "2.0", pro: false, lesson_type: "Lesson", code: nil, code_summary_state: "not_ready"}
])